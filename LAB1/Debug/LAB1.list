
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004794  08004794  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004794  08004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800479c  0800479c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800479c  0800479c  0001479c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080047a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000014  080047b8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080047b8  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccdd  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d8  00000000  00000000  0002cd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0002ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002fae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001606a  00000000  00000000  000306b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dceb  00000000  00000000  00046722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e5f9  00000000  00000000  0005440d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2a06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f8  00000000  00000000  000e2a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800476c 	.word	0x0800476c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	0800476c 	.word	0x0800476c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <I2CStartRestart>:
// See page 21 of the LSM303DLHC datasheet for more info about these values
#define ACCELEROMETER_READ  0x33
#define ACCELEROMETER_WRITE 0x32

void I2CStartRestart()
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
	// See page 493 of ST's RM0383.  We're in master mode, this will start/restart
	// I2C communication.
	ACCESS(I2C1_CR1) |= (1 << 8);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <I2CStartRestart+0x1c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <I2CStartRestart+0x1c>)
 8000d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40005400 	.word	0x40005400

08000d38 <I2CStop>:

void I2CStop()
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	// See page 493 of ST's RM0383.  We're in master mode, so setting this bit will
	// "stop generation after the current byte transfer or after the current Start
	// condition is sent".
	ACCESS(I2C1_CR1) |= (1 << 9);
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <I2CStop+0x1c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <I2CStop+0x1c>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40005400 	.word	0x40005400

08000d58 <I2CEnableAcknowledge>:

void I2CEnableAcknowledge()
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	// See page 493 of ST's RM0383.  Setting this bit will "acknowledge returned
	// after a byte is received".  The accelerometer will acknowledge when a byte
	// is received.
	ACCESS(I2C1_CR1) |= (1 << 10);
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <I2CEnableAcknowledge+0x1c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <I2CEnableAcknowledge+0x1c>)
 8000d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40005400 	.word	0x40005400

08000d78 <I2CDisableAcknowledge>:

void I2CDisableAcknowledge()
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
	// See page 493 of ST's RM0383.  We turn acknowledge off here.
	ACCESS(I2C1_CR1) &= ~(1 << 10);
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <I2CDisableAcknowledge+0x1c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <I2CDisableAcknowledge+0x1c>)
 8000d82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40005400 	.word	0x40005400

08000d98 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(unsigned short address)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
	// See page 500.  We wait for the start bit to be generated.
	while((ACCESS(I2C1_SR1) & 1) == 0);
 8000da2:	bf00      	nop
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <I2CSendSlaveAddress+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0f9      	beq.n	8000da4 <I2CSendSlaveAddress+0xc>

	// Write the address into the I2C data register.
	ACCESS(I2C1_DR) = address;
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <I2CSendSlaveAddress+0x44>)
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	6013      	str	r3, [r2, #0]

	// See page 500.  Wait until the end of transmission.
	while((ACCESS(I2C1_SR1) & (1 << 1)) == 0);
 8000db6:	bf00      	nop
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <I2CSendSlaveAddress+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0f9      	beq.n	8000db8 <I2CSendSlaveAddress+0x20>

	// See page 500 of the datasheet, under bit 1 ADDR: "This bit is cleared by software
	// reading SR1 register followed reading SR2"
	ACCESS(I2C1_SR1);
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <I2CSendSlaveAddress+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
	ACCESS(I2C1_SR2);
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <I2CSendSlaveAddress+0x48>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40005414 	.word	0x40005414
 8000ddc:	40005410 	.word	0x40005410
 8000de0:	40005418 	.word	0x40005418

08000de4 <I2CSendRegister>:

void I2CSendRegister(unsigned short registerAddress)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
	// See page 499. We wait until the Tx data register is empty.
	while((ACCESS(I2C1_SR1) & (1 << 7)) == 0);
 8000dee:	bf00      	nop
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <I2CSendRegister+0x3c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f9      	beq.n	8000df0 <I2CSendRegister+0xc>

	// Put the register address into the data register
	ACCESS(I2C1_DR) = registerAddress;
 8000dfc:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <I2CSendRegister+0x40>)
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	6013      	str	r3, [r2, #0]

	// Wait until the transfer is complete.
	while((ACCESS(I2C1_SR1) & (1 << 7)) == 0);
 8000e02:	bf00      	nop
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <I2CSendRegister+0x3c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f9      	beq.n	8000e04 <I2CSendRegister+0x20>
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40005414 	.word	0x40005414
 8000e24:	40005410 	.word	0x40005410

08000e28 <I2CWaitIfBusy>:

void I2CWaitIfBusy()
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
	// See page 502 of the datasheet.  Bit 1 of SR2 will be set when the I2C bus is busy.
	while((ACCESS(I2C1_SR2) & (1 << 1)) == (1 << 1));
 8000e2c:	bf00      	nop
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <I2CWaitIfBusy+0x20>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d0f9      	beq.n	8000e2e <I2CWaitIfBusy+0x6>
}
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40005418 	.word	0x40005418

08000e4c <I2CWriteByte>:

void I2CWriteByte(unsigned char data)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
	// Write the data to the data register
	ACCESS(I2C1_DR) = data;
 8000e56:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <I2CWriteByte+0x2c>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	6013      	str	r3, [r2, #0]

	// See page 500 of the datasheet.  Bit 2 will be set when the data transfer has succeeded.
	while((ACCESS(I2C1_SR1) & (1 << 2)) == 0);
 8000e5c:	bf00      	nop
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <I2CWriteByte+0x30>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f9      	beq.n	8000e5e <I2CWriteByte+0x12>
}
 8000e6a:	bf00      	nop
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40005410 	.word	0x40005410
 8000e7c:	40005414 	.word	0x40005414

08000e80 <I2CGetData>:

unsigned char I2CGetData()
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
	// See page 499 of the datasheet.  Bit 6 of SR1 will be set when receiver data exist the
	// data register.
	while((ACCESS(I2C1_SR1) & (1 << 6)) == 0) { }
 8000e84:	bf00      	nop
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <I2CGetData+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f9      	beq.n	8000e86 <I2CGetData+0x6>

	// Return the data
	return ACCESS(I2C1_DR);
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <I2CGetData+0x28>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	b2db      	uxtb	r3, r3
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40005414 	.word	0x40005414
 8000ea8:	40005410 	.word	0x40005410

08000eac <ReadFromAccelerometer>:

unsigned char ReadFromAccelerometer(unsigned short registerAddress)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
	I2CWaitIfBusy();
 8000eb6:	f7ff ffb7 	bl	8000e28 <I2CWaitIfBusy>

	I2CEnableAcknowledge();
 8000eba:	f7ff ff4d 	bl	8000d58 <I2CEnableAcknowledge>

	I2CStartRestart();
 8000ebe:	f7ff ff2b 	bl	8000d18 <I2CStartRestart>

	// This address of the device we want to read from
	I2CSendSlaveAddress(ACCELEROMETER_WRITE);
 8000ec2:	2032      	movs	r0, #50	; 0x32
 8000ec4:	f7ff ff68 	bl	8000d98 <I2CSendSlaveAddress>

	// The address of the register we want to read from
	I2CSendRegister(registerAddress);
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff8a 	bl	8000de4 <I2CSendRegister>

	I2CStartRestart();
 8000ed0:	f7ff ff22 	bl	8000d18 <I2CStartRestart>

	// Request a read from the accelerometer
	I2CSendSlaveAddress(ACCELEROMETER_READ);
 8000ed4:	2033      	movs	r0, #51	; 0x33
 8000ed6:	f7ff ff5f 	bl	8000d98 <I2CSendSlaveAddress>

	I2CDisableAcknowledge();
 8000eda:	f7ff ff4d 	bl	8000d78 <I2CDisableAcknowledge>

	I2CStop();
 8000ede:	f7ff ff2b 	bl	8000d38 <I2CStop>

	return I2CGetData();
 8000ee2:	f7ff ffcd 	bl	8000e80 <I2CGetData>
 8000ee6:	4603      	mov	r3, r0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <WriteToAccelerometer>:

void WriteToAccelerometer(unsigned short registerAddress, unsigned char data)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	460a      	mov	r2, r1
 8000efa:	80fb      	strh	r3, [r7, #6]
 8000efc:	4613      	mov	r3, r2
 8000efe:	717b      	strb	r3, [r7, #5]
	I2CWaitIfBusy();
 8000f00:	f7ff ff92 	bl	8000e28 <I2CWaitIfBusy>

	I2CStartRestart();
 8000f04:	f7ff ff08 	bl	8000d18 <I2CStartRestart>

	// This address of the device we want to write to
	I2CSendSlaveAddress(ACCELEROMETER_WRITE);
 8000f08:	2032      	movs	r0, #50	; 0x32
 8000f0a:	f7ff ff45 	bl	8000d98 <I2CSendSlaveAddress>

	// The address of the register we want to write to
	I2CSendRegister(registerAddress);
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff67 	bl	8000de4 <I2CSendRegister>

	// The data we want to write
	I2CWriteByte(data);
 8000f16:	797b      	ldrb	r3, [r7, #5]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff97 	bl	8000e4c <I2CWriteByte>

	I2CStop();
 8000f1e:	f7ff ff0b 	bl	8000d38 <I2CStop>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <AccelerometerInit>:
// See page 33 of UM1842.  It shows the LSM303DLHC (the accelerometer) is connected to the STM32F411 using
// the following pins for I2C communication:
// SCL  --> PB6
// SDA  --> PB9
void AccelerometerInit()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
	//SendString("Initializing Accelerometer Device\r\n");

	// Give a clock to port B as pins PB6 and PB9 are connected to the accelerometer (pg 33 of UM1842) and
	// page 116 of RM0383 for the RCC AHB register info.
	ACCESS(RCC_AHB1ENR) |= (1 << 1);
 8000f32:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <AccelerometerInit+0xd0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a31      	ldr	r2, [pc, #196]	; (8000ffc <AccelerometerInit+0xd0>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6013      	str	r3, [r2, #0]

	// See page 156 of the datasheet.  We configure PB6 and PB9 to alternate function.
	ACCESS(GPIOB_MODER) |= ((1 << 13) | (1 << 19));
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <AccelerometerInit+0xd4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <AccelerometerInit+0xd4>)
 8000f44:	f443 2302 	orr.w	r3, r3, #532480	; 0x82000
 8000f48:	6013      	str	r3, [r2, #0]

	// See pages 21 and 22 of the ST UM1842 document.  It shows the LSM303DLHC uses I2C1.  Then, looking at
	// page 149 of ST RM0383 shows I2C1 is alternate function 4.  Then looking at pages 160 and 161 shows
	// which bits to set of the AFRL and AFRH registers: Pin 6 = bits 24-27 of AFRL and pin 9 = bits 4-7 of
	// AFRH.
	ACCESS(GPIOB_AFRL) |= (4 << 24);
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <AccelerometerInit+0xd8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	; (8001004 <AccelerometerInit+0xd8>)
 8000f50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f54:	6013      	str	r3, [r2, #0]
	ACCESS(GPIOB_AFRH) |= (4 << 4);
 8000f56:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <AccelerometerInit+0xdc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a2b      	ldr	r2, [pc, #172]	; (8001008 <AccelerometerInit+0xdc>)
 8000f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f60:	6013      	str	r3, [r2, #0]

	// Set the pins to fast speed.  See pg 157 for more info on the register.  Pin 6 corresponds to
	// bits 12/13, 9=18/19.
	ACCESS(GPIOB_OSPEEDR) |= ((2 << 12) | (2 << 18));
 8000f62:	4b2a      	ldr	r3, [pc, #168]	; (800100c <AccelerometerInit+0xe0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a29      	ldr	r2, [pc, #164]	; (800100c <AccelerometerInit+0xe0>)
 8000f68:	f443 2302 	orr.w	r3, r3, #532480	; 0x82000
 8000f6c:	6013      	str	r3, [r2, #0]

	// See page 117.  We give a clock to I2C1 by setting bit 21 of the RCC APB1 peripheral clock enable register.
	ACCESS(RCC_APB1ENR) |= (1 << 21);
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <AccelerometerInit+0xe4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a27      	ldr	r2, [pc, #156]	; (8001010 <AccelerometerInit+0xe4>)
 8000f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f78:	6013      	str	r3, [r2, #0]

	// See page 495 of the datasheet for info on CR2 peripheral clock frequency.  We set the clock to 2 MHz.
	ACCESS(I2C1_CR2) &= ~(0x3F);
 8000f7a:	4b26      	ldr	r3, [pc, #152]	; (8001014 <AccelerometerInit+0xe8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a25      	ldr	r2, [pc, #148]	; (8001014 <AccelerometerInit+0xe8>)
 8000f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f84:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_CR2) |= (0x02);
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <AccelerometerInit+0xe8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a22      	ldr	r2, [pc, #136]	; (8001014 <AccelerometerInit+0xe8>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6013      	str	r3, [r2, #0]
	//    "For instance: in Sm mode, to generate a 100 kHz SCL frequency:
	//     If FREQR = 08, TPCLK1 = 125 ns so CCR must be programmed with 0x28
	//     (0x28 <=> 40d x 125 ns = 5000 ns.)"
	// So, 125 ns = 8 MHz clock.  We have a 16 MHz clock, so if I just substitute in 62.5 for 125 we can
	// compensate by doubling 40d to 80d which = 0x50.
	ACCESS(I2C1_CCR) &= ~(0xFFF);
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <AccelerometerInit+0xec>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a20      	ldr	r2, [pc, #128]	; (8001018 <AccelerometerInit+0xec>)
 8000f98:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000f9c:	f023 030f 	bic.w	r3, r3, #15
 8000fa0:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_CCR) |= 0x50;
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <AccelerometerInit+0xec>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <AccelerometerInit+0xec>)
 8000fa8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000fac:	6013      	str	r3, [r2, #0]
	//     value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns therefore the TRISE[5:0] bits
	//     must be programmed with 09h. (1000 ns / 125 ns = 8 + 1)"
	// We have FREQ set to 0x02.  So this should give us:
	// 1000 ns / 500 ns = 2 + 1
	// So we should be able to set this to 3.
	ACCESS(I2C1_TRISE) &= ~(0x3F);
 8000fae:	4b1b      	ldr	r3, [pc, #108]	; (800101c <AccelerometerInit+0xf0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a1a      	ldr	r2, [pc, #104]	; (800101c <AccelerometerInit+0xf0>)
 8000fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fb8:	6013      	str	r3, [r2, #0]
	ACCESS(I2C1_TRISE) |= 0x03;
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <AccelerometerInit+0xf0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a17      	ldr	r2, [pc, #92]	; (800101c <AccelerometerInit+0xf0>)
 8000fc0:	f043 0303 	orr.w	r3, r3, #3
 8000fc4:	6013      	str	r3, [r2, #0]

	// See page 496 for info on OAR1 (I2C Own address register 1).  We set the following:
	//   Bit 1-7: Interface Address: 100001 = 0x21
	//   Bit 14: b/c the datasheet says "bit 14 Should always be kept at 1 by software"
	// Note that we're using 7 bit addressing mode so we leave bit 15 as zero
	ACCESS(I2C1_OAR1) |= ((0x21 << 1) | (1 << 14));
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <AccelerometerInit+0xf4>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a15      	ldr	r2, [pc, #84]	; (8001020 <AccelerometerInit+0xf4>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8000fd4:	6013      	str	r3, [r2, #0]

	// Enable I2C1.  See page 494 of the datasheet.
	ACCESS(I2C1_CR1) |= 1;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <AccelerometerInit+0xf8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <AccelerometerInit+0xf8>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6013      	str	r3, [r2, #0]
	// datasheet as well which shows a register (0xF) not documented in the LSM303DLHC.  This
	// register is labeled as WHO_AM_I and returns an 8 bit constant.  Looking through various
	// STM32 code I found that this also exists for the LSM303DLHC and returns a constant of
	// 0x33.  So that's what I'm checking here.  It's good to do as a sanity check just to make
	// sure everything is working ok and we can communicate with the accelerometer.
	unsigned char accelerometerID = ReadFromAccelerometer(0xF);
 8000fe2:	200f      	movs	r0, #15
 8000fe4:	f7ff ff62 	bl	8000eac <ReadFromAccelerometer>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]

	// See page 25 of the LSM303DLHC datasheet.  Register 0x20 is CTRL_REG1_A.  We set this
	// register to 0x47 (0100.0111) to configure the accelerometer as follows:
	// 1) Normal / low-power mode (50 Hz)
	// 2) Enable X, Y and Z axes
	WriteToAccelerometer(0x20, 0x47);
 8000fec:	2147      	movs	r1, #71	; 0x47
 8000fee:	2020      	movs	r0, #32
 8000ff0:	f7ff ff7e 	bl	8000ef0 <WriteToAccelerometer>

	//SendString("Done Initializing Accelerometer Device\r\n");
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023830 	.word	0x40023830
 8001000:	40020400 	.word	0x40020400
 8001004:	40020420 	.word	0x40020420
 8001008:	40020424 	.word	0x40020424
 800100c:	40020408 	.word	0x40020408
 8001010:	40023840 	.word	0x40023840
 8001014:	40005404 	.word	0x40005404
 8001018:	4000541c 	.word	0x4000541c
 800101c:	40005420 	.word	0x40005420
 8001020:	40005408 	.word	0x40005408
 8001024:	40005400 	.word	0x40005400

08001028 <WaitForSPI1RXReady>:

#include "RegisterAddresses.h"


void WaitForSPI1RXReady()
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
	// See page 605 of the datasheet for info on the SPI status register
	// If Bit0 == 0 then SPI RX is empty
	// If Bit7 == 1 then SPI is busy
	while((ACCESS(SPI1_SR) & 1) == 0 || (ACCESS(SPI1_SR) & (1 << 7)) == 1) { }
 800102c:	bf00      	nop
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <WaitForSPI1RXReady+0x2c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f9      	beq.n	800102e <WaitForSPI1RXReady+0x6>
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <WaitForSPI1RXReady+0x2c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	2b01      	cmp	r3, #1
 8001044:	d0f3      	beq.n	800102e <WaitForSPI1RXReady+0x6>
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40013008 	.word	0x40013008

08001058 <WaitForSPI1TXReady>:

void WaitForSPI1TXReady()
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	// See page 605 of the datasheet for info on the SPI status register
	// If Bit1 == 0 then SPI TX buffer is not empty
	// If Bit7 == 1 then SPI is busy
	while((ACCESS(SPI1_SR) & (1 << 1)) == 0 || (ACCESS(SPI1_SR) & (1 << 7)) == 1) { }
 800105c:	bf00      	nop
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <WaitForSPI1TXReady+0x2c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f9      	beq.n	800105e <WaitForSPI1TXReady+0x6>
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <WaitForSPI1TXReady+0x2c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	2b01      	cmp	r3, #1
 8001074:	d0f3      	beq.n	800105e <WaitForSPI1TXReady+0x6>
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40013008 	.word	0x40013008

08001088 <ReadFromGyro>:
// 4) Write the next byte
// 5) Read a result
// 6) Set CS back to high

unsigned char ReadFromGyro(unsigned char gyroRegister)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	ACCESS(GPIOE_BSRR) |= (1 << 19);
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <ReadFromGyro+0x5c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <ReadFromGyro+0x5c>)
 8001098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800109c:	6013      	str	r3, [r2, #0]
	WaitForSPI1TXReady();
 800109e:	f7ff ffdb 	bl	8001058 <WaitForSPI1TXReady>
	ACCESS(SPI1_DR) = (gyroRegister | 0x80); // 0x80 indicates we're doing a read
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <ReadFromGyro+0x60>)
 80010ac:	601a      	str	r2, [r3, #0]
	WaitForSPI1RXReady();
 80010ae:	f7ff ffbb 	bl	8001028 <WaitForSPI1RXReady>
	ACCESS(SPI1_DR);  // I believe we need this simply because a read must follow a write
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <ReadFromGyro+0x60>)
 80010b4:	681b      	ldr	r3, [r3, #0]
	WaitForSPI1TXReady();
 80010b6:	f7ff ffcf 	bl	8001058 <WaitForSPI1TXReady>
	ACCESS(SPI1_DR) = 0xFF;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <ReadFromGyro+0x60>)
 80010bc:	22ff      	movs	r2, #255	; 0xff
 80010be:	601a      	str	r2, [r3, #0]
	WaitForSPI1RXReady();
 80010c0:	f7ff ffb2 	bl	8001028 <WaitForSPI1RXReady>
	volatile unsigned char readValue = (unsigned char)ACCESS(SPI1_DR);
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <ReadFromGyro+0x60>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	73fb      	strb	r3, [r7, #15]
	ACCESS(GPIOE_BSRR) |= (1 << 3);
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <ReadFromGyro+0x5c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <ReadFromGyro+0x5c>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	6013      	str	r3, [r2, #0]

	return readValue;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	b2db      	uxtb	r3, r3
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40021018 	.word	0x40021018
 80010e8:	4001300c 	.word	0x4001300c

080010ec <WriteToGyro>:

void WriteToGyro(unsigned char gyroRegister, unsigned char value)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
	ACCESS(GPIOE_BSRR) |= (1 << 19);
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <WriteToGyro+0x54>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <WriteToGyro+0x54>)
 8001102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001106:	6013      	str	r3, [r2, #0]
	WaitForSPI1TXReady();
 8001108:	f7ff ffa6 	bl	8001058 <WaitForSPI1TXReady>
	ACCESS(SPI1_DR) = gyroRegister;
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <WriteToGyro+0x58>)
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	6013      	str	r3, [r2, #0]
	WaitForSPI1RXReady();
 8001112:	f7ff ff89 	bl	8001028 <WaitForSPI1RXReady>
	ACCESS(SPI1_DR);  // I believe we need this simply because a read must follow a write
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <WriteToGyro+0x58>)
 8001118:	681b      	ldr	r3, [r3, #0]
	WaitForSPI1TXReady();
 800111a:	f7ff ff9d 	bl	8001058 <WaitForSPI1TXReady>
	ACCESS(SPI1_DR) = value;
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <WriteToGyro+0x58>)
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	6013      	str	r3, [r2, #0]
	WaitForSPI1RXReady();
 8001124:	f7ff ff80 	bl	8001028 <WaitForSPI1RXReady>
	ACCESS(SPI1_DR);  // Don't care what valley the device put into the data register
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <WriteToGyro+0x58>)
 800112a:	681b      	ldr	r3, [r3, #0]
	ACCESS(GPIOE_BSRR) |= (1 << 3);
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <WriteToGyro+0x54>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a03      	ldr	r2, [pc, #12]	; (8001140 <WriteToGyro+0x54>)
 8001132:	f043 0308 	orr.w	r3, r3, #8
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021018 	.word	0x40021018
 8001144:	4001300c 	.word	0x4001300c

08001148 <GyroInit>:

void GyroInit()
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	//*SendString("Initializing Gyro Device\r\n");

	// Give a clock to port A as pins PA5-thru-PA7 are connected to the gyro (pg 20 of UM1842) and
	// page 116 of RM0383 for the RCC AHB register info.
	ACCESS(RCC_AHB1ENR) |= 1;
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <GyroInit+0x9c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <GyroInit+0x9c>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6013      	str	r3, [r2, #0]

	// Give a clock to port E as pin PE3 is connected to the chip select of the gyro (pg 20 of
	// UM1842) and page 116 of RM0383 for the RCC AHB register info.
	ACCESS(RCC_AHB1ENR) |= (1 << 4);
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <GyroInit+0x9c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <GyroInit+0x9c>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	6013      	str	r3, [r2, #0]

	// See pg 20 of the ST UM1842 document.  We'll be using SPI1 to communicate with the gyro.
	// See pg 149 of RM0383.  It shows SPI1 to be alternate function 5.
	// See pg 156 of RM0383 for documentation on the GPIO mode register.  It shows how to set
	// pins to alternate mode.  We do this for pins PA5, PA6, PA7.
	ACCESS(GPIOA_MODER) |= ((1 << 11) | (1 << 13) | (1 << 15));
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <GyroInit+0xa0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <GyroInit+0xa0>)
 800116a:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 800116e:	6013      	str	r3, [r2, #0]
	ACCESS(GPIOE_MODER) |= (1 << 6);
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <GyroInit+0xa4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <GyroInit+0xa4>)
 8001176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800117a:	6013      	str	r3, [r2, #0]

	// See pg 149 of ST RM0383 document.  SPI1 is AF5.  And pg 160 of the same document shows
	// alternate function for pin 5 = bits 20-23, pin 6 = bits 24-27, pin 7 = bits 28-31.
	// We set these to 5.
	ACCESS(GPIOA_AFRL) |= ((5 << 20) | (5 << 24) | (5 << 28));
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <GyroInit+0xa8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <GyroInit+0xa8>)
 8001182:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8001186:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800118a:	6013      	str	r3, [r2, #0]

	// Set the pins to fast speed.  See pg 157 for more info on the register.  Pin 5 corresponds to
	// bits 10/11, 6=12/13, and 7=14,15.  And for port E pin 3 corresponds to bits 6/7.
	ACCESS(GPIOA_OSPEEDR) |= ((2 << 10) | (2 << 12) | (2 << 14));
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <GyroInit+0xac>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <GyroInit+0xac>)
 8001192:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 8001196:	6013      	str	r3, [r2, #0]
	ACCESS(GPIOE_OSPEEDR) |= (2 << 6);
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <GyroInit+0xb0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <GyroInit+0xb0>)
 800119e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a2:	6013      	str	r3, [r2, #0]

	// Enable clock for SPI1
	ACCESS(RCC_APB2ENR) |= (1 << 12);
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <GyroInit+0xb4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <GyroInit+0xb4>)
 80011aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ae:	6013      	str	r3, [r2, #0]
	// Set Bit 0: The second clock transition is the first data capture edge
	// Set Bit 1: CK to 1 when idle
	// Set Bit 2: The STM32 is the master, the gyro is the slave
	// Set Bits 3-5 to 010 for a baud rate of fPCLK/8
	// Set Bits 8-9: Software slave management enabled, Internal slave select to 1
	ACCESS(SPI1_CR1) |= (1 | (1 << 1) | (1 << 2) | (2 << 3) | (1 << 8) | (1 << 9));
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <GyroInit+0xb8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a12      	ldr	r2, [pc, #72]	; (8001200 <GyroInit+0xb8>)
 80011b6:	f443 7345 	orr.w	r3, r3, #788	; 0x314
 80011ba:	f043 0303 	orr.w	r3, r3, #3
 80011be:	6013      	str	r3, [r2, #0]

	// Set Bit 6: Enable SPI.  See page 603.
	ACCESS(SPI1_CR1) |= (1 << 6);
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <GyroInit+0xb8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <GyroInit+0xb8>)
 80011c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ca:	6013      	str	r3, [r2, #0]

	// Set the CS high on the gyro as setting it low indicates communication.  See
	// 25 of the L3GD20 datasheet and page 159 of RM0383 for more info on BSRR.
	ACCESS(GPIOE_BSRR) |= (1 << 3);
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <GyroInit+0xbc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <GyroInit+0xbc>)
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	6013      	str	r3, [r2, #0]
		SendString("Initializing Gyro Device Failed\r\n");
	}
	 */
	// See page 31 of the L3GD20 datasheet.  Writing 0x0F to register 0x20 will power up
	// the gyro and enables the X, Y, Z axes.
	WriteToGyro(0x20, 0x0F);
 80011d8:	210f      	movs	r1, #15
 80011da:	2020      	movs	r0, #32
 80011dc:	f7ff ff86 	bl	80010ec <WriteToGyro>

	//*SendString("Initializing of Gyro Device Successful\r\n");
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023830 	.word	0x40023830
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40020020 	.word	0x40020020
 80011f4:	40020008 	.word	0x40020008
 80011f8:	40021008 	.word	0x40021008
 80011fc:	40023844 	.word	0x40023844
 8001200:	40013000 	.word	0x40013000
 8001204:	40021018 	.word	0x40021018

08001208 <GetAxisValue>:

short GetAxisValue(unsigned char lowRegister, unsigned char highRegister)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	460a      	mov	r2, r1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
	// See page 9 of L3GD20.  It shows the mechanical characteristics of the gyro.  Note
	// that we leave the sensitivity as is (i.e. 0) so that it's 250 dps.  So, we read
	// the value from the gyro and convert it to a +/- 360 degree value.
	float scaler = 8.75 * 0.001;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <GetAxisValue+0x58>)
 800121a:	60fb      	str	r3, [r7, #12]
	short temp = (ReadFromGyro(lowRegister) | (ReadFromGyro(highRegister) << 8));
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff32 	bl	8001088 <ReadFromGyro>
 8001224:	4603      	mov	r3, r0
 8001226:	b21c      	sxth	r4, r3
 8001228:	79bb      	ldrb	r3, [r7, #6]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff2c 	bl	8001088 <ReadFromGyro>
 8001230:	4603      	mov	r3, r0
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b21b      	sxth	r3, r3
 8001236:	4323      	orrs	r3, r4
 8001238:	817b      	strh	r3, [r7, #10]
	return (short)((float)temp * scaler);
 800123a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001246:	edd7 7a03 	vldr	s15, [r7, #12]
 800124a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001252:	ee17 3a90 	vmov	r3, s15
 8001256:	b21b      	sxth	r3, r3
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	3c0f5c29 	.word	0x3c0f5c29

08001264 <disp1color_FillScreenbuff>:

//==============================================================================
// Процедура заполняет буфер кадра значением FillValue
//==============================================================================
void disp1color_FillScreenbuff(uint8_t FillValue)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  memset(disp1color_buff, FillValue, sizeof(disp1color_buff));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2240      	movs	r2, #64	; 0x40
 8001272:	4619      	mov	r1, r3
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <disp1color_FillScreenbuff+0x20>)
 8001276:	f003 fa71 	bl	800475c <memset>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000b0 	.word	0x200000b0

08001288 <disp1color_UpdateFromBuff>:

//==============================================================================
// Процедура обновляет состояние индикаторов в соответствии с буфером кадра disp1color_buff
//==============================================================================
void disp1color_UpdateFromBuff(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  DMD_1COLOR_DisplayFullUpdate(disp1color_buff, sizeof(disp1color_buff));
 800128c:	2140      	movs	r1, #64	; 0x40
 800128e:	4802      	ldr	r0, [pc, #8]	; (8001298 <disp1color_UpdateFromBuff+0x10>)
 8001290:	f000 f944 	bl	800151c <DMD_1COLOR_DisplayFullUpdate>

  //printf("BUF horz:\n");
  //print_buf(DMD_1COLOR_Buff, sizeof(DMD_1COLOR_Buff));
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000b0 	.word	0x200000b0

0800129c <disp1color_DrawPixel>:

//==============================================================================
// Процедура устанавливает состояние 1 пикселя дисплея
//==============================================================================
void disp1color_DrawPixel(int16_t X, int16_t Y, uint8_t State)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	460b      	mov	r3, r1
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	70fb      	strb	r3, [r7, #3]
  //Х и У координаты пикселя, отсчитываются слева направо (Х) сверху вниз (У) с 0
  // Проверяем, находится ли точка в поле отрисовки дисплея
  if ((X >= DISP1COLOR_Width) || (Y >= DISP1COLOR_Height) || (X < 0) || (Y < 0))
 80012ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b2:	2b1f      	cmp	r3, #31
 80012b4:	dc48      	bgt.n	8001348 <disp1color_DrawPixel+0xac>
 80012b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	dc44      	bgt.n	8001348 <disp1color_DrawPixel+0xac>
 80012be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db40      	blt.n	8001348 <disp1color_DrawPixel+0xac>
 80012c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db3c      	blt.n	8001348 <disp1color_DrawPixel+0xac>
    return;
  
  //Байты относительно матрицы расположены вертикально, в 2 ряда
  uint16_t ByteIdx = Y >> 3;
 80012ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012d2:	10db      	asrs	r3, r3, #3
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	81fb      	strh	r3, [r7, #14]
  uint8_t BitIdx = Y - (ByteIdx << 3); // Высота относительно строки байт (0<=Y<=7)
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	89fb      	ldrh	r3, [r7, #14]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	737b      	strb	r3, [r7, #13]
  ByteIdx *= DISP1COLOR_Width;  
 80012e8:	89fb      	ldrh	r3, [r7, #14]
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	81fb      	strh	r3, [r7, #14]
  ByteIdx += X;
 80012ee:	88fa      	ldrh	r2, [r7, #6]
 80012f0:	89fb      	ldrh	r3, [r7, #14]
 80012f2:	4413      	add	r3, r2
 80012f4:	81fb      	strh	r3, [r7, #14]
  
  //Заполнение буфера данных для отрисовки
  if (State)
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00f      	beq.n	800131c <disp1color_DrawPixel+0x80>
    disp1color_buff[ByteIdx] |= (1 << BitIdx);
 80012fc:	89fb      	ldrh	r3, [r7, #14]
 80012fe:	4a15      	ldr	r2, [pc, #84]	; (8001354 <disp1color_DrawPixel+0xb8>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	b25a      	sxtb	r2, r3
 8001304:	7b7b      	ldrb	r3, [r7, #13]
 8001306:	2101      	movs	r1, #1
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	b25b      	sxtb	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b25a      	sxtb	r2, r3
 8001312:	89fb      	ldrh	r3, [r7, #14]
 8001314:	b2d1      	uxtb	r1, r2
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <disp1color_DrawPixel+0xb8>)
 8001318:	54d1      	strb	r1, [r2, r3]
 800131a:	e010      	b.n	800133e <disp1color_DrawPixel+0xa2>
  else
    disp1color_buff[ByteIdx] &= ~(1 << BitIdx);
 800131c:	89fb      	ldrh	r3, [r7, #14]
 800131e:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <disp1color_DrawPixel+0xb8>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	b25a      	sxtb	r2, r3
 8001324:	7b7b      	ldrb	r3, [r7, #13]
 8001326:	2101      	movs	r1, #1
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	b25b      	sxtb	r3, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4013      	ands	r3, r2
 8001334:	b25a      	sxtb	r2, r3
 8001336:	89fb      	ldrh	r3, [r7, #14]
 8001338:	b2d1      	uxtb	r1, r2
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <disp1color_DrawPixel+0xb8>)
 800133c:	54d1      	strb	r1, [r2, r3]

 // printf("PIX:%d%s", disp1color_buff[ByteIdx], "\n");
  uint8_t buf = disp1color_buff[ByteIdx];
 800133e:	89fb      	ldrh	r3, [r7, #14]
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <disp1color_DrawPixel+0xb8>)
 8001342:	5cd3      	ldrb	r3, [r2, r3]
 8001344:	733b      	strb	r3, [r7, #12]
 8001346:	e000      	b.n	800134a <disp1color_DrawPixel+0xae>
    return;
 8001348:	bf00      	nop
//  for (int i = 0; i < 8; i++) {
//	  printf("%c", (buf & 0x80) ? '1' : '0');
//	  buf <<= 1;
//  }
//  printf("\n");
}
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	200000b0 	.word	0x200000b0

08001358 <disp1color_DrawCircle>:

//==============================================================================
// Процедура рисует окружность в буфере кадра дисплея. x0 и y0 - координаты центра окружности
//==============================================================================
void disp1color_DrawCircle(int16_t x0, int16_t y0, int16_t radius) 
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
 8001362:	460b      	mov	r3, r1
 8001364:	80bb      	strh	r3, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	807b      	strh	r3, [r7, #2]
  int x = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  int y = radius;
 800136e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001372:	613b      	str	r3, [r7, #16]
  int delta = 1 - 2 * radius;
 8001374:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	f1c3 0301 	rsb	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
  int error = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  disp1color_DrawPixel(x0, y0, 1);
 8001384:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138c:	2201      	movs	r2, #1
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff84 	bl	800129c <disp1color_DrawPixel>
  while (y >= 1)
 8001394:	e0b9      	b.n	800150a <disp1color_DrawCircle+0x1b2>
  {
    disp1color_DrawPixel(x0 + x, y0 + y, 1);
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	b29a      	uxth	r2, r3
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	4413      	add	r3, r2
 800139e:	b29b      	uxth	r3, r3
 80013a0:	b218      	sxth	r0, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	88bb      	ldrh	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	2201      	movs	r2, #1
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff ff73 	bl	800129c <disp1color_DrawPixel>
    disp1color_DrawPixel(x0 + x, y0 - y, 1);
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	4413      	add	r3, r2
 80013be:	b29b      	uxth	r3, r3
 80013c0:	b218      	sxth	r0, r3
 80013c2:	88ba      	ldrh	r2, [r7, #4]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff ff63 	bl	800129c <disp1color_DrawPixel>
	disp1color_DrawPixel(x0 - x, y0 + y, 1);
 80013d6:	88fa      	ldrh	r2, [r7, #6]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b218      	sxth	r0, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	88bb      	ldrh	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	2201      	movs	r2, #1
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff ff53 	bl	800129c <disp1color_DrawPixel>
	disp1color_DrawPixel(x0 - x, y0 - y, 1);
 80013f6:	88fa      	ldrh	r2, [r7, #6]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b218      	sxth	r0, r3
 8001402:	88ba      	ldrh	r2, [r7, #4]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	b29b      	uxth	r3, r3
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b29b      	uxth	r3, r3
 800140c:	b21b      	sxth	r3, r3
 800140e:	2201      	movs	r2, #1
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff ff43 	bl	800129c <disp1color_DrawPixel>
	disp1color_DrawPixel(x0 + y, y0 + x, 1);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	b29a      	uxth	r2, r3
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	4413      	add	r3, r2
 800141e:	b29b      	uxth	r3, r3
 8001420:	b218      	sxth	r0, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	b29a      	uxth	r2, r3
 8001426:	88bb      	ldrh	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	b29b      	uxth	r3, r3
 800142c:	b21b      	sxth	r3, r3
 800142e:	2201      	movs	r2, #1
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff ff33 	bl	800129c <disp1color_DrawPixel>
	disp1color_DrawPixel(x0 + y, y0 - x, 1);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	b29a      	uxth	r2, r3
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	4413      	add	r3, r2
 800143e:	b29b      	uxth	r3, r3
 8001440:	b218      	sxth	r0, r3
 8001442:	88ba      	ldrh	r2, [r7, #4]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	b29b      	uxth	r3, r3
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	b29b      	uxth	r3, r3
 800144c:	b21b      	sxth	r3, r3
 800144e:	2201      	movs	r2, #1
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff ff23 	bl	800129c <disp1color_DrawPixel>
	disp1color_DrawPixel(x0 - y, y0 + x, 1);
 8001456:	88fa      	ldrh	r2, [r7, #6]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	b29b      	uxth	r3, r3
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	b29b      	uxth	r3, r3
 8001460:	b218      	sxth	r0, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	b29a      	uxth	r2, r3
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	b21b      	sxth	r3, r3
 800146e:	2201      	movs	r2, #1
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff ff13 	bl	800129c <disp1color_DrawPixel>
	disp1color_DrawPixel(x0 - y, y0 - x, 1);
 8001476:	88fa      	ldrh	r2, [r7, #6]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	b29b      	uxth	r3, r3
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	b29b      	uxth	r3, r3
 8001480:	b218      	sxth	r0, r3
 8001482:	88ba      	ldrh	r2, [r7, #4]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	b29b      	uxth	r3, r3
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	b29b      	uxth	r3, r3
 800148c:	b21b      	sxth	r3, r3
 800148e:	2201      	movs	r2, #1
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff ff03 	bl	800129c <disp1color_DrawPixel>
    error = 2 * (delta + y) - 1;
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4413      	add	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	3b01      	subs	r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]

    if (delta < 0 && error <= 0) 
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da0c      	bge.n	80014c2 <disp1color_DrawCircle+0x16a>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	dc09      	bgt.n	80014c2 <disp1color_DrawCircle+0x16a>
    {
      ++x;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
      delta += 2 * x + 1;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	3301      	adds	r3, #1
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4413      	add	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
      continue;
 80014c0:	e023      	b.n	800150a <disp1color_DrawCircle+0x1b2>
    }
	
    error = 2 * (delta - x) - 1;
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	3b01      	subs	r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
		
    if (delta > 0 && error > 0) 
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	dd0d      	ble.n	80014f0 <disp1color_DrawCircle+0x198>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	dd0a      	ble.n	80014f0 <disp1color_DrawCircle+0x198>
    {
      --y;
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	3b01      	subs	r3, #1
 80014de:	613b      	str	r3, [r7, #16]
      delta += 1 - 2 * y;
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	f1c3 0301 	rsb	r3, r3, #1
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
      continue;
 80014ee:	e00c      	b.n	800150a <disp1color_DrawCircle+0x1b2>
    }
	
    ++x;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
    delta += 2 * (x - y);
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
    --y;
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	3b01      	subs	r3, #1
 8001508:	613b      	str	r3, [r7, #16]
  while (y >= 1)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	2b00      	cmp	r3, #0
 800150e:	f73f af42 	bgt.w	8001396 <disp1color_DrawCircle+0x3e>
  }

}
 8001512:	bf00      	nop
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <DMD_1COLOR_DisplayFullUpdate>:

//==============================================================================
// Процедура подготавливает буфер на передачу в экран в соответствии с буфером pBuff графической бибилиотеки
//==============================================================================
void DMD_1COLOR_DisplayFullUpdate(uint8_t *pBuff, uint16_t BuffLen)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
	DMD_1COLOR_UpdateRow4(0, pBuff, BuffLen);
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	461a      	mov	r2, r3
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	2000      	movs	r0, #0
 8001530:	f000 f816 	bl	8001560 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(1, pBuff, BuffLen);
 8001534:	887b      	ldrh	r3, [r7, #2]
 8001536:	461a      	mov	r2, r3
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	2001      	movs	r0, #1
 800153c:	f000 f810 	bl	8001560 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(2, pBuff, BuffLen);
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	461a      	mov	r2, r3
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	2002      	movs	r0, #2
 8001548:	f000 f80a 	bl	8001560 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(3, pBuff, BuffLen);
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	461a      	mov	r2, r3
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	2003      	movs	r0, #3
 8001554:	f000 f804 	bl	8001560 <DMD_1COLOR_UpdateRow4>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <DMD_1COLOR_UpdateRow4>:

//==============================================================================
// Процедура обновляет поочерёдно все матрицы экрана
//==============================================================================
void DMD_1COLOR_UpdateRow4(uint8_t Row4, uint8_t *pBuff, uint16_t BuffLen)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	80bb      	strh	r3, [r7, #4]
	// Подготавливаем данные для передачи
	uint16_t MatrixInRow = DMD_1COLOR_ScreenWidth / DMD_1COLOR_MatrixWidth;
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <DMD_1COLOR_UpdateRow4+0xcc>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	095b      	lsrs	r3, r3, #5
 8001576:	b2db      	uxtb	r3, r3
 8001578:	81bb      	strh	r3, [r7, #12]
	uint16_t MatrixInCol = DMD_1COLOR_ScreenHeight / DMD_1COLOR_MatrixHeight;
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <DMD_1COLOR_UpdateRow4+0xd0>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	b2db      	uxtb	r3, r3
 8001582:	817b      	strh	r3, [r7, #10]
	uint8_t MatrixLines8 = DMD_1COLOR_MatrixHeight >> 3;
 8001584:	2302      	movs	r3, #2
 8001586:	727b      	strb	r3, [r7, #9]
	uint16_t StartIdxRow = 0, StartIdxCol = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	83fb      	strh	r3, [r7, #30]
 800158c:	2300      	movs	r3, #0
 800158e:	83bb      	strh	r3, [r7, #28]

	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8001590:	2300      	movs	r3, #0
 8001592:	76fb      	strb	r3, [r7, #27]
 8001594:	e040      	b.n	8001618 <DMD_1COLOR_UpdateRow4+0xb8>
	{
		StartIdxCol = StartIdxRow;
 8001596:	8bfb      	ldrh	r3, [r7, #30]
 8001598:	83bb      	strh	r3, [r7, #28]

		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 800159a:	2300      	movs	r3, #0
 800159c:	76bb      	strb	r3, [r7, #26]
 800159e:	e028      	b.n	80015f2 <DMD_1COLOR_UpdateRow4+0x92>
		{
			// Копируем буфер кадра одной матрицы
			uint8_t *pDst = DMD_1COLOR_MatrixBuff;
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <DMD_1COLOR_UpdateRow4+0xd4>)
 80015a2:	617b      	str	r3, [r7, #20]
			uint8_t *pSrc = &pBuff[StartIdxCol];
 80015a4:	8bbb      	ldrh	r3, [r7, #28]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	4413      	add	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]

			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e015      	b.n	80015de <DMD_1COLOR_UpdateRow4+0x7e>
			{
				memcpy(pDst, pSrc, DMD_1COLOR_MatrixWidth);
 80015b2:	2220      	movs	r2, #32
 80015b4:	6939      	ldr	r1, [r7, #16]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f003 f8c2 	bl	8004740 <memcpy>
				DMD_1COLOR_SendFromMatrixBuff(Row4, DMD_1COLOR_MatrixBuff);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	491d      	ldr	r1, [pc, #116]	; (8001634 <DMD_1COLOR_UpdateRow4+0xd4>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f839 	bl	8001638 <DMD_1COLOR_SendFromMatrixBuff>
				pDst += DMD_1COLOR_MatrixWidth;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3320      	adds	r3, #32
 80015ca:	617b      	str	r3, [r7, #20]
				pSrc += DMD_1COLOR_ScreenWidth;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <DMD_1COLOR_UpdateRow4+0xcc>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4413      	add	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	3301      	adds	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	7a7b      	ldrb	r3, [r7, #9]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d3e5      	bcc.n	80015b2 <DMD_1COLOR_UpdateRow4+0x52>
			}

			StartIdxCol += DMD_1COLOR_MatrixWidth;
 80015e6:	8bbb      	ldrh	r3, [r7, #28]
 80015e8:	3320      	adds	r3, #32
 80015ea:	83bb      	strh	r3, [r7, #28]
		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 80015ec:	7ebb      	ldrb	r3, [r7, #26]
 80015ee:	3301      	adds	r3, #1
 80015f0:	76bb      	strb	r3, [r7, #26]
 80015f2:	7ebb      	ldrb	r3, [r7, #26]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	897a      	ldrh	r2, [r7, #10]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8d1      	bhi.n	80015a0 <DMD_1COLOR_UpdateRow4+0x40>
		}
		StartIdxRow += MatrixLines8 * DMD_1COLOR_ScreenWidth;
 80015fc:	7a7b      	ldrb	r3, [r7, #9]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <DMD_1COLOR_UpdateRow4+0xcc>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	fb12 f303 	smulbb	r3, r2, r3
 800160a:	b29a      	uxth	r2, r3
 800160c:	8bfb      	ldrh	r3, [r7, #30]
 800160e:	4413      	add	r3, r2
 8001610:	83fb      	strh	r3, [r7, #30]
	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8001612:	7efb      	ldrb	r3, [r7, #27]
 8001614:	3301      	adds	r3, #1
 8001616:	76fb      	strb	r3, [r7, #27]
 8001618:	7efb      	ldrb	r3, [r7, #27]
 800161a:	b29b      	uxth	r3, r3
 800161c:	89ba      	ldrh	r2, [r7, #12]
 800161e:	429a      	cmp	r2, r3
 8001620:	d8b9      	bhi.n	8001596 <DMD_1COLOR_UpdateRow4+0x36>
	}
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3720      	adds	r7, #32
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000001 	.word	0x20000001
 8001630:	20000000 	.word	0x20000000
 8001634:	20000030 	.word	0x20000030

08001638 <DMD_1COLOR_SendFromMatrixBuff>:

//==============================================================================
// Процедура обновляет 1 матрицу
//==============================================================================
void DMD_1COLOR_SendFromMatrixBuff(uint8_t Row4, uint8_t *pBuff)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
	uint8_t MatrixRows8bit = DMD_1COLOR_MatrixHeight >> 3;
 8001644:	2302      	movs	r3, #2
 8001646:	747b      	strb	r3, [r7, #17]
	uint8_t MatrixCols8bit = DMD_1COLOR_MatrixWidth >> 3;
 8001648:	2304      	movs	r3, #4
 800164a:	743b      	strb	r3, [r7, #16]
	uint8_t *pPart = (uint8_t *) &(DMD_1COLOR_Buff[Row4][0]);
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	4a22      	ldr	r2, [pc, #136]	; (80016dc <DMD_1COLOR_SendFromMatrixBuff+0xa4>)
 8001652:	4413      	add	r3, r2
 8001654:	617b      	str	r3, [r7, #20]

	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8001656:	2300      	movs	r3, #0
 8001658:	74fb      	strb	r3, [r7, #19]
 800165a:	e035      	b.n	80016c8 <DMD_1COLOR_SendFromMatrixBuff+0x90>
	{
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 800165c:	7c7b      	ldrb	r3, [r7, #17]
 800165e:	74bb      	strb	r3, [r7, #18]
 8001660:	e02c      	b.n	80016bc <DMD_1COLOR_SendFromMatrixBuff+0x84>
		{
			uint8_t *p8Bytes = pBuff + ((Row - 1) * DMD_1COLOR_MatrixWidth);
 8001662:	7cbb      	ldrb	r3, [r7, #18]
 8001664:	3b01      	subs	r3, #1
 8001666:	015b      	lsls	r3, r3, #5
 8001668:	461a      	mov	r2, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	4413      	add	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]
			p8Bytes += (Col << 3);
 8001670:	7cfb      	ldrb	r3, [r7, #19]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	461a      	mov	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]

			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << (Row4 + 4), p8Bytes);
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	3304      	adds	r3, #4
 8001680:	2201      	movs	r2, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	b2da      	uxtb	r2, r3
 8001688:	697c      	ldr	r4, [r7, #20]
 800168a:	1c63      	adds	r3, r4, #1
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	68f9      	ldr	r1, [r7, #12]
 8001690:	4610      	mov	r0, r2
 8001692:	f000 f825 	bl	80016e0 <DMD_1COLOR_GetFrom8ScreenBytes>
 8001696:	4603      	mov	r3, r0
 8001698:	7023      	strb	r3, [r4, #0]
			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << Row4, p8Bytes);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2201      	movs	r2, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	697c      	ldr	r4, [r7, #20]
 80016a6:	1c63      	adds	r3, r4, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	68f9      	ldr	r1, [r7, #12]
 80016ac:	4610      	mov	r0, r2
 80016ae:	f000 f817 	bl	80016e0 <DMD_1COLOR_GetFrom8ScreenBytes>
 80016b2:	4603      	mov	r3, r0
 80016b4:	7023      	strb	r3, [r4, #0]
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 80016b6:	7cbb      	ldrb	r3, [r7, #18]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	74bb      	strb	r3, [r7, #18]
 80016bc:	7cbb      	ldrb	r3, [r7, #18]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1cf      	bne.n	8001662 <DMD_1COLOR_SendFromMatrixBuff+0x2a>
	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 80016c2:	7cfb      	ldrb	r3, [r7, #19]
 80016c4:	3301      	adds	r3, #1
 80016c6:	74fb      	strb	r3, [r7, #19]
 80016c8:	7cfa      	ldrb	r2, [r7, #19]
 80016ca:	7c3b      	ldrb	r3, [r7, #16]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d3c5      	bcc.n	800165c <DMD_1COLOR_SendFromMatrixBuff+0x24>
		}
	}
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	371c      	adds	r7, #28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000070 	.word	0x20000070

080016e0 <DMD_1COLOR_GetFrom8ScreenBytes>:
//==============================================================================
// Функция возвращает байт (строку из 8 светодиодов) по 8-байтному фрагменту буфера
// графической библиотеки и маске соответствующей строки светодиодов во фрагменте
//==============================================================================
uint8_t DMD_1COLOR_GetFrom8ScreenBytes(uint8_t Mask, uint8_t *pBuff)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
	//Переводим "вертикальные" байты из массива в горизонтальные
	//в соответствии с текущей строкой.
	//В итоге получается массив, где биты расположены горизонтально,
	//Первый бит слева внизу, счет увеличивается вверх и вправо.
	//Но строки в секторе расположены сверху вниз
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	73bb      	strb	r3, [r7, #14]
 80016f4:	e010      	b.n	8001718 <DMD_1COLOR_GetFrom8ScreenBytes+0x38>
	{
		if (*pBuff & Mask)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	781a      	ldrb	r2, [r3, #0]
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	4013      	ands	r3, r2
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <DMD_1COLOR_GetFrom8ScreenBytes+0x2c>
			Byte |= BitMask;
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	7bbb      	ldrb	r3, [r7, #14]
 8001708:	4313      	orrs	r3, r2
 800170a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 800170c:	7bbb      	ldrb	r3, [r7, #14]
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	73bb      	strb	r3, [r7, #14]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1eb      	bne.n	80016f6 <DMD_1COLOR_GetFrom8ScreenBytes+0x16>
	}

//#if (DMD_1COLOR_Inverse == 1)
	//Инвертируем данные (так как LED панель горит при 0)
	Byte ^= 0xFF;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	43db      	mvns	r3, r3
 8001722:	73fb      	strb	r3, [r7, #15]
//#endif

	return Byte;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <prepare_data>:
//==============================================================================


//Копирование из подготовленного буфера в массивиы для построчного вводы в матрицу
void prepare_data() {
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
	//Идем по строкам
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 800173a:	2300      	movs	r3, #0
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	e042      	b.n	80017c6 <prepare_data+0x92>
		//По столбцам
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 8001740:	2300      	movs	r3, #0
 8001742:	71bb      	strb	r3, [r7, #6]
 8001744:	e039      	b.n	80017ba <prepare_data+0x86>
			if (i == 0) {
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10a      	bne.n	8001762 <prepare_data+0x2e>
				data1[k] = DMD_1COLOR_Buff[i][k];
 800174c:	79f9      	ldrb	r1, [r7, #7]
 800174e:	79ba      	ldrb	r2, [r7, #6]
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	4822      	ldr	r0, [pc, #136]	; (80017dc <prepare_data+0xa8>)
 8001754:	0109      	lsls	r1, r1, #4
 8001756:	4401      	add	r1, r0
 8001758:	440a      	add	r2, r1
 800175a:	7811      	ldrb	r1, [r2, #0]
 800175c:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <prepare_data+0xac>)
 800175e:	54d1      	strb	r1, [r2, r3]
 8001760:	e028      	b.n	80017b4 <prepare_data+0x80>
			}
			else if (i == 1) {
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d10a      	bne.n	800177e <prepare_data+0x4a>
				data2[k] = DMD_1COLOR_Buff[i][k];
 8001768:	79f9      	ldrb	r1, [r7, #7]
 800176a:	79ba      	ldrb	r2, [r7, #6]
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	481b      	ldr	r0, [pc, #108]	; (80017dc <prepare_data+0xa8>)
 8001770:	0109      	lsls	r1, r1, #4
 8001772:	4401      	add	r1, r0
 8001774:	440a      	add	r2, r1
 8001776:	7811      	ldrb	r1, [r2, #0]
 8001778:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <prepare_data+0xb0>)
 800177a:	54d1      	strb	r1, [r2, r3]
 800177c:	e01a      	b.n	80017b4 <prepare_data+0x80>
			}
			else if (i == 2) {
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d10a      	bne.n	800179a <prepare_data+0x66>
				data3[k] = DMD_1COLOR_Buff[i][k];
 8001784:	79f9      	ldrb	r1, [r7, #7]
 8001786:	79ba      	ldrb	r2, [r7, #6]
 8001788:	79bb      	ldrb	r3, [r7, #6]
 800178a:	4814      	ldr	r0, [pc, #80]	; (80017dc <prepare_data+0xa8>)
 800178c:	0109      	lsls	r1, r1, #4
 800178e:	4401      	add	r1, r0
 8001790:	440a      	add	r2, r1
 8001792:	7811      	ldrb	r1, [r2, #0]
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <prepare_data+0xb4>)
 8001796:	54d1      	strb	r1, [r2, r3]
 8001798:	e00c      	b.n	80017b4 <prepare_data+0x80>
			}
			else if (i == 3) {
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d109      	bne.n	80017b4 <prepare_data+0x80>
				data4[k] = DMD_1COLOR_Buff[i][k];
 80017a0:	79f9      	ldrb	r1, [r7, #7]
 80017a2:	79ba      	ldrb	r2, [r7, #6]
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	480d      	ldr	r0, [pc, #52]	; (80017dc <prepare_data+0xa8>)
 80017a8:	0109      	lsls	r1, r1, #4
 80017aa:	4401      	add	r1, r0
 80017ac:	440a      	add	r2, r1
 80017ae:	7811      	ldrb	r1, [r2, #0]
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <prepare_data+0xb8>)
 80017b2:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	3301      	adds	r3, #1
 80017b8:	71bb      	strb	r3, [r7, #6]
 80017ba:	79bb      	ldrb	r3, [r7, #6]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d9c2      	bls.n	8001746 <prepare_data+0x12>
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	3301      	adds	r3, #1
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d9b9      	bls.n	8001740 <prepare_data+0xc>
			}
		}
	}
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000070 	.word	0x20000070
 80017e0:	200000f0 	.word	0x200000f0
 80017e4:	20000100 	.word	0x20000100
 80017e8:	20000110 	.word	0x20000110
 80017ec:	20000120 	.word	0x20000120

080017f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b40      	ldr	r3, [pc, #256]	; (800190c <MX_GPIO_Init+0x11c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a3f      	ldr	r2, [pc, #252]	; (800190c <MX_GPIO_Init+0x11c>)
 8001810:	f043 0310 	orr.w	r3, r3, #16
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <MX_GPIO_Init+0x11c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b39      	ldr	r3, [pc, #228]	; (800190c <MX_GPIO_Init+0x11c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a38      	ldr	r2, [pc, #224]	; (800190c <MX_GPIO_Init+0x11c>)
 800182c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <MX_GPIO_Init+0x11c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	4b32      	ldr	r3, [pc, #200]	; (800190c <MX_GPIO_Init+0x11c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a31      	ldr	r2, [pc, #196]	; (800190c <MX_GPIO_Init+0x11c>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <MX_GPIO_Init+0x11c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <MX_GPIO_Init+0x11c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a2a      	ldr	r2, [pc, #168]	; (800190c <MX_GPIO_Init+0x11c>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b28      	ldr	r3, [pc, #160]	; (800190c <MX_GPIO_Init+0x11c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <MX_GPIO_Init+0x11c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a23      	ldr	r2, [pc, #140]	; (800190c <MX_GPIO_Init+0x11c>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b21      	ldr	r3, [pc, #132]	; (800190c <MX_GPIO_Init+0x11c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI_Pin|INT1_Pin|INT2_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	210b      	movs	r1, #11
 8001896:	481e      	ldr	r0, [pc, #120]	; (8001910 <MX_GPIO_Init+0x120>)
 8001898:	f001 f968 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|A_Pin|B_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2134      	movs	r1, #52	; 0x34
 80018a0:	481c      	ldr	r0, [pc, #112]	; (8001914 <MX_GPIO_Init+0x124>)
 80018a2:	f001 f963 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2110      	movs	r1, #16
 80018aa:	481b      	ldr	r0, [pc, #108]	; (8001918 <MX_GPIO_Init+0x128>)
 80018ac:	f001 f95e 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SPI_Pin|INT1_Pin|INT2_Pin;
 80018b0:	230b      	movs	r3, #11
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	4812      	ldr	r0, [pc, #72]	; (8001910 <MX_GPIO_Init+0x120>)
 80018c8:	f000 ffcc 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SCLK_Pin|A_Pin|B_Pin;
 80018cc:	2334      	movs	r3, #52	; 0x34
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	480c      	ldr	r0, [pc, #48]	; (8001914 <MX_GPIO_Init+0x124>)
 80018e4:	f000 ffbe 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nOE_Pin;
 80018e8:	2310      	movs	r3, #16
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nOE_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	; (8001918 <MX_GPIO_Init+0x128>)
 8001900:	f000 ffb0 	bl	8002864 <HAL_GPIO_Init>

}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	; 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	40021000 	.word	0x40021000
 8001914:	40020800 	.word	0x40020800
 8001918:	40020000 	.word	0x40020000

0800191c <disp_row>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void disp_row(int row){
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]


	  if (row == 0){
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d122      	bne.n	8001970 <disp_row+0x54>

		  for(uint8_t i=0; i<6; i++){
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	e008      	b.n	8001942 <disp_row+0x26>
		  		HAL_SPI_Transmit(&hspi2, &data1, 16, 10);
 8001930:	230a      	movs	r3, #10
 8001932:	2210      	movs	r2, #16
 8001934:	4953      	ldr	r1, [pc, #332]	; (8001a84 <disp_row+0x168>)
 8001936:	4854      	ldr	r0, [pc, #336]	; (8001a88 <disp_row+0x16c>)
 8001938:	f001 fddf 	bl	80034fa <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	3301      	adds	r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	2b05      	cmp	r3, #5
 8001946:	d9f3      	bls.n	8001930 <disp_row+0x14>
		  }

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	2104      	movs	r1, #4
 800194c:	484f      	ldr	r0, [pc, #316]	; (8001a8c <disp_row+0x170>)
 800194e:	f001 f90d 	bl	8002b6c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001952:	2201      	movs	r2, #1
 8001954:	2104      	movs	r1, #4
 8001956:	484d      	ldr	r0, [pc, #308]	; (8001a8c <disp_row+0x170>)
 8001958:	f001 f908 	bl	8002b6c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	2110      	movs	r1, #16
 8001960:	484a      	ldr	r0, [pc, #296]	; (8001a8c <disp_row+0x170>)
 8001962:	f001 f903 	bl	8002b6c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2120      	movs	r1, #32
 800196a:	4848      	ldr	r0, [pc, #288]	; (8001a8c <disp_row+0x170>)
 800196c:	f001 f8fe 	bl	8002b6c <HAL_GPIO_WritePin>
	  }
	  if (row == 1){
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d122      	bne.n	80019bc <disp_row+0xa0>

		  for(uint8_t i=0; i<6; i++){
 8001976:	2300      	movs	r3, #0
 8001978:	73bb      	strb	r3, [r7, #14]
 800197a:	e008      	b.n	800198e <disp_row+0x72>
		  		HAL_SPI_Transmit(&hspi2, &data2, 16, 10);
 800197c:	230a      	movs	r3, #10
 800197e:	2210      	movs	r2, #16
 8001980:	4943      	ldr	r1, [pc, #268]	; (8001a90 <disp_row+0x174>)
 8001982:	4841      	ldr	r0, [pc, #260]	; (8001a88 <disp_row+0x16c>)
 8001984:	f001 fdb9 	bl	80034fa <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 8001988:	7bbb      	ldrb	r3, [r7, #14]
 800198a:	3301      	adds	r3, #1
 800198c:	73bb      	strb	r3, [r7, #14]
 800198e:	7bbb      	ldrb	r3, [r7, #14]
 8001990:	2b05      	cmp	r3, #5
 8001992:	d9f3      	bls.n	800197c <disp_row+0x60>
		  }

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2104      	movs	r1, #4
 8001998:	483c      	ldr	r0, [pc, #240]	; (8001a8c <disp_row+0x170>)
 800199a:	f001 f8e7 	bl	8002b6c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2104      	movs	r1, #4
 80019a2:	483a      	ldr	r0, [pc, #232]	; (8001a8c <disp_row+0x170>)
 80019a4:	f001 f8e2 	bl	8002b6c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2110      	movs	r1, #16
 80019ac:	4837      	ldr	r0, [pc, #220]	; (8001a8c <disp_row+0x170>)
 80019ae:	f001 f8dd 	bl	8002b6c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2120      	movs	r1, #32
 80019b6:	4835      	ldr	r0, [pc, #212]	; (8001a8c <disp_row+0x170>)
 80019b8:	f001 f8d8 	bl	8002b6c <HAL_GPIO_WritePin>
	  }

	  if (row == 2){
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d122      	bne.n	8001a08 <disp_row+0xec>

		  for(uint8_t i=0; i<6; i++){
 80019c2:	2300      	movs	r3, #0
 80019c4:	737b      	strb	r3, [r7, #13]
 80019c6:	e008      	b.n	80019da <disp_row+0xbe>
		  		HAL_SPI_Transmit(&hspi2, &data3, 16, 10);
 80019c8:	230a      	movs	r3, #10
 80019ca:	2210      	movs	r2, #16
 80019cc:	4931      	ldr	r1, [pc, #196]	; (8001a94 <disp_row+0x178>)
 80019ce:	482e      	ldr	r0, [pc, #184]	; (8001a88 <disp_row+0x16c>)
 80019d0:	f001 fd93 	bl	80034fa <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 80019d4:	7b7b      	ldrb	r3, [r7, #13]
 80019d6:	3301      	adds	r3, #1
 80019d8:	737b      	strb	r3, [r7, #13]
 80019da:	7b7b      	ldrb	r3, [r7, #13]
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d9f3      	bls.n	80019c8 <disp_row+0xac>
		  }

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2104      	movs	r1, #4
 80019e4:	4829      	ldr	r0, [pc, #164]	; (8001a8c <disp_row+0x170>)
 80019e6:	f001 f8c1 	bl	8002b6c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80019ea:	2201      	movs	r2, #1
 80019ec:	2104      	movs	r1, #4
 80019ee:	4827      	ldr	r0, [pc, #156]	; (8001a8c <disp_row+0x170>)
 80019f0:	f001 f8bc 	bl	8002b6c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2110      	movs	r1, #16
 80019f8:	4824      	ldr	r0, [pc, #144]	; (8001a8c <disp_row+0x170>)
 80019fa:	f001 f8b7 	bl	8002b6c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	2120      	movs	r1, #32
 8001a02:	4822      	ldr	r0, [pc, #136]	; (8001a8c <disp_row+0x170>)
 8001a04:	f001 f8b2 	bl	8002b6c <HAL_GPIO_WritePin>
	  }

	  if (row == 3){
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d122      	bne.n	8001a54 <disp_row+0x138>

		  for(uint8_t i=0; i<6; i++){
 8001a0e:	2300      	movs	r3, #0
 8001a10:	733b      	strb	r3, [r7, #12]
 8001a12:	e008      	b.n	8001a26 <disp_row+0x10a>
		  		HAL_SPI_Transmit(&hspi2, &data4, 16, 10);
 8001a14:	230a      	movs	r3, #10
 8001a16:	2210      	movs	r2, #16
 8001a18:	491f      	ldr	r1, [pc, #124]	; (8001a98 <disp_row+0x17c>)
 8001a1a:	481b      	ldr	r0, [pc, #108]	; (8001a88 <disp_row+0x16c>)
 8001a1c:	f001 fd6d 	bl	80034fa <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 8001a20:	7b3b      	ldrb	r3, [r7, #12]
 8001a22:	3301      	adds	r3, #1
 8001a24:	733b      	strb	r3, [r7, #12]
 8001a26:	7b3b      	ldrb	r3, [r7, #12]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d9f3      	bls.n	8001a14 <disp_row+0xf8>
		  }

		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2104      	movs	r1, #4
 8001a30:	4816      	ldr	r0, [pc, #88]	; (8001a8c <disp_row+0x170>)
 8001a32:	f001 f89b 	bl	8002b6c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001a36:	2201      	movs	r2, #1
 8001a38:	2104      	movs	r1, #4
 8001a3a:	4814      	ldr	r0, [pc, #80]	; (8001a8c <disp_row+0x170>)
 8001a3c:	f001 f896 	bl	8002b6c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	2110      	movs	r1, #16
 8001a44:	4811      	ldr	r0, [pc, #68]	; (8001a8c <disp_row+0x170>)
 8001a46:	f001 f891 	bl	8002b6c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	480f      	ldr	r0, [pc, #60]	; (8001a8c <disp_row+0x170>)
 8001a50:	f001 f88c 	bl	8002b6c <HAL_GPIO_WritePin>
	  }


	  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_SET);
 8001a54:	2201      	movs	r2, #1
 8001a56:	2110      	movs	r1, #16
 8001a58:	4810      	ldr	r0, [pc, #64]	; (8001a9c <disp_row+0x180>)
 8001a5a:	f001 f887 	bl	8002b6c <HAL_GPIO_WritePin>
		  for(uint32_t x=0; x<=300; x++) {};
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	e002      	b.n	8001a6a <disp_row+0x14e>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	3301      	adds	r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a70:	d9f8      	bls.n	8001a64 <disp_row+0x148>
	 HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2110      	movs	r1, #16
 8001a76:	4809      	ldr	r0, [pc, #36]	; (8001a9c <disp_row+0x180>)
 8001a78:	f001 f878 	bl	8002b6c <HAL_GPIO_WritePin>
  }
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200000f0 	.word	0x200000f0
 8001a88:	200001a8 	.word	0x200001a8
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	20000100 	.word	0x20000100
 8001a94:	20000110 	.word	0x20000110
 8001a98:	20000120 	.word	0x20000120
 8001a9c:	40020000 	.word	0x40020000

08001aa0 <DrawFillCircle>:

void DrawFillCircle(int16_t X, int16_t Y, uint8_t Radius){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	80bb      	strh	r3, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	70fb      	strb	r3, [r7, #3]
	for(int r = 0; r<Radius; r++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e00a      	b.n	8001ace <DrawFillCircle+0x2e>
		disp1color_DrawCircle(X, Y, r);
 8001ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001abc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fc48 	bl	8001358 <disp1color_DrawCircle>
	for(int r = 0; r<Radius; r++)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dbf0      	blt.n	8001ab8 <DrawFillCircle+0x18>
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <GyroCalculateError>:

void GyroCalculateError() {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0

	while (c < rot) {
 8001ae4:	e031      	b.n	8001b4a <GyroCalculateError+0x6a>
		gX = GetAxisValue(0x2A, 0x2B);
 8001ae6:	212b      	movs	r1, #43	; 0x2b
 8001ae8:	202a      	movs	r0, #42	; 0x2a
 8001aea:	f7ff fb8d 	bl	8001208 <GetAxisValue>
 8001aee:	ee07 0a90 	vmov	s15, r0
 8001af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af6:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <GyroCalculateError+0xb4>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
		GyroErrorX += gX;
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <GyroCalculateError+0xb4>)
 8001afe:	ed93 7a00 	vldr	s14, [r3]
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <GyroCalculateError+0xb8>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <GyroCalculateError+0xb8>)
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
		gY = GetAxisValue(0x28, 0x29);
 8001b12:	2129      	movs	r1, #41	; 0x29
 8001b14:	2028      	movs	r0, #40	; 0x28
 8001b16:	f7ff fb77 	bl	8001208 <GetAxisValue>
 8001b1a:	ee07 0a90 	vmov	s15, r0
 8001b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <GyroCalculateError+0xbc>)
 8001b24:	edc3 7a00 	vstr	s15, [r3]
		GyroErrorY += gY;
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <GyroCalculateError+0xbc>)
 8001b2a:	ed93 7a00 	vldr	s14, [r3]
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <GyroCalculateError+0xc0>)
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <GyroCalculateError+0xc0>)
 8001b3a:	edc3 7a00 	vstr	s15, [r3]
		c++;
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <GyroCalculateError+0xc4>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <GyroCalculateError+0xc4>)
 8001b48:	801a      	strh	r2, [r3, #0]
	while (c < rot) {
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <GyroCalculateError+0xc4>)
 8001b4c:	881a      	ldrh	r2, [r3, #0]
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <GyroCalculateError+0xc8>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d3c7      	bcc.n	8001ae6 <GyroCalculateError+0x6>
	}
	GyroErrorX = GyroErrorX / rot;
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <GyroCalculateError+0xb8>)
 8001b58:	edd3 6a00 	vldr	s13, [r3]
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <GyroCalculateError+0xc8>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <GyroCalculateError+0xb8>)
 8001b6e:	edc3 7a00 	vstr	s15, [r3]
	GyroErrorY = GyroErrorY / rot;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <GyroCalculateError+0xc0>)
 8001b74:	edd3 6a00 	vldr	s13, [r3]
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <GyroCalculateError+0xc8>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <GyroCalculateError+0xc0>)
 8001b8a:	edc3 7a00 	vstr	s15, [r3]
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000130 	.word	0x20000130
 8001b98:	20000138 	.word	0x20000138
 8001b9c:	20000134 	.word	0x20000134
 8001ba0:	2000013c 	.word	0x2000013c
 8001ba4:	2000014c 	.word	0x2000014c
 8001ba8:	20000004 	.word	0x20000004

08001bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb2:	f000 fcaf 	bl	8002514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb6:	f000 f8df 	bl	8001d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bba:	f7ff fe19 	bl	80017f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001bbe:	f000 f949 	bl	8001e54 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001bc2:	f000 f97d 	bl	8001ec0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001bc6:	f000 fb3f 	bl	8002248 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bca:	f000 fb8f 	bl	80022ec <MX_TIM2_Init>
  GyroInit();
 8001bce:	f7ff fabb 	bl	8001148 <GyroInit>
  AccelerometerInit();
 8001bd2:	f7ff f9ab 	bl	8000f2c <AccelerometerInit>
  HAL_Delay(1000);
 8001bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bda:	f000 fd0d 	bl	80025f8 <HAL_Delay>
  GyroCalculateError();
 8001bde:	f7ff ff7f 	bl	8001ae0 <GyroCalculateError>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001be2:	485d      	ldr	r0, [pc, #372]	; (8001d58 <main+0x1ac>)
 8001be4:	f001 fee0 	bl	80039a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //GyroCalculateError();
	  x = AngleX/6; y = AngleY/6;
 8001be8:	4b5c      	ldr	r3, [pc, #368]	; (8001d5c <main+0x1b0>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bfa:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bfe:	793b      	ldrb	r3, [r7, #4]
 8001c00:	b25a      	sxtb	r2, r3
 8001c02:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <main+0x1b4>)
 8001c04:	701a      	strb	r2, [r3, #0]
 8001c06:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <main+0x1b8>)
 8001c08:	ed93 7a00 	vldr	s14, [r3]
 8001c0c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c18:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c1c:	793b      	ldrb	r3, [r7, #4]
 8001c1e:	b25a      	sxtb	r2, r3
 8001c20:	4b51      	ldr	r3, [pc, #324]	; (8001d68 <main+0x1bc>)
 8001c22:	701a      	strb	r2, [r3, #0]
	  radius = 3;
 8001c24:	4b51      	ldr	r3, [pc, #324]	; (8001d6c <main+0x1c0>)
 8001c26:	2203      	movs	r2, #3
 8001c28:	701a      	strb	r2, [r3, #0]

	  if (x0 + x + radius > DISPLAY_Width) x = DISPLAY_Width - x0 - radius;
 8001c2a:	4b51      	ldr	r3, [pc, #324]	; (8001d70 <main+0x1c4>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <main+0x1b4>)
 8001c32:	f993 3000 	ldrsb.w	r3, [r3]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a4c      	ldr	r2, [pc, #304]	; (8001d6c <main+0x1c0>)
 8001c3a:	7812      	ldrb	r2, [r2, #0]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	2b20      	cmp	r3, #32
 8001c40:	dd0c      	ble.n	8001c5c <main+0xb0>
 8001c42:	4b4b      	ldr	r3, [pc, #300]	; (8001d70 <main+0x1c4>)
 8001c44:	781a      	ldrb	r2, [r3, #0]
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <main+0x1c0>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f1c3 0320 	rsb	r3, r3, #32
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	b25a      	sxtb	r2, r3
 8001c56:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <main+0x1b4>)
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e017      	b.n	8001c8c <main+0xe0>
	  else if (x0 + x - radius+1 < 0) x = -x0 + radius-1;
 8001c5c:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <main+0x1c4>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <main+0x1b4>)
 8001c64:	f993 3000 	ldrsb.w	r3, [r3]
 8001c68:	4413      	add	r3, r2
 8001c6a:	4a40      	ldr	r2, [pc, #256]	; (8001d6c <main+0x1c0>)
 8001c6c:	7812      	ldrb	r2, [r2, #0]
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	da0a      	bge.n	8001c8c <main+0xe0>
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <main+0x1c0>)
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <main+0x1c4>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	b25a      	sxtb	r2, r3
 8001c88:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <main+0x1b4>)
 8001c8a:	701a      	strb	r2, [r3, #0]

	  if (y0 + y + radius > DISPLAY_Height) y = DISPLAY_Height - y0 - radius;
 8001c8c:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <main+0x1c8>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <main+0x1bc>)
 8001c94:	f993 3000 	ldrsb.w	r3, [r3]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a34      	ldr	r2, [pc, #208]	; (8001d6c <main+0x1c0>)
 8001c9c:	7812      	ldrb	r2, [r2, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	2b10      	cmp	r3, #16
 8001ca2:	dd0c      	ble.n	8001cbe <main+0x112>
 8001ca4:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <main+0x1c8>)
 8001ca6:	781a      	ldrb	r2, [r3, #0]
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <main+0x1c0>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4413      	add	r3, r2
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f1c3 0310 	rsb	r3, r3, #16
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	b25a      	sxtb	r2, r3
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <main+0x1bc>)
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e017      	b.n	8001cee <main+0x142>
	  else if (y0 + y - radius+1 < 0) y = -y0 + radius-1;
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <main+0x1c8>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <main+0x1bc>)
 8001cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a27      	ldr	r2, [pc, #156]	; (8001d6c <main+0x1c0>)
 8001cce:	7812      	ldrb	r2, [r2, #0]
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd6:	da0a      	bge.n	8001cee <main+0x142>
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <main+0x1c0>)
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <main+0x1c8>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	b25a      	sxtb	r2, r3
 8001cea:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <main+0x1bc>)
 8001cec:	701a      	strb	r2, [r3, #0]

	  disp1color_FillScreenbuff(0);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff fab8 	bl	8001264 <disp1color_FillScreenbuff>
	  DrawFillCircle(x0+x, y0+y, radius);
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <main+0x1c4>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b21a      	sxth	r2, r3
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <main+0x1b4>)
 8001cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	b218      	sxth	r0, r3
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <main+0x1c8>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <main+0x1bc>)
 8001d0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <main+0x1c0>)
 8001d1a:	7812      	ldrb	r2, [r2, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7ff febf 	bl	8001aa0 <DrawFillCircle>
	  disp1color_UpdateFromBuff();
 8001d22:	f7ff fab1 	bl	8001288 <disp1color_UpdateFromBuff>
	  prepare_data();
 8001d26:	f7ff fd05 	bl	8001734 <prepare_data>

	  for(uint8_t i=0; i<20; i++){
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	e00e      	b.n	8001d4e <main+0x1a2>
		  disp_row(0);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7ff fdf3 	bl	800191c <disp_row>
		  disp_row(1);
 8001d36:	2001      	movs	r0, #1
 8001d38:	f7ff fdf0 	bl	800191c <disp_row>
		  disp_row(2);
 8001d3c:	2002      	movs	r0, #2
 8001d3e:	f7ff fded 	bl	800191c <disp_row>
		  disp_row(3);
 8001d42:	2003      	movs	r0, #3
 8001d44:	f7ff fdea 	bl	800191c <disp_row>
	  for(uint8_t i=0; i<20; i++){
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2b13      	cmp	r3, #19
 8001d52:	d9ed      	bls.n	8001d30 <main+0x184>
  {
 8001d54:	e748      	b.n	8001be8 <main+0x3c>
 8001d56:	bf00      	nop
 8001d58:	20000208 	.word	0x20000208
 8001d5c:	20000140 	.word	0x20000140
 8001d60:	20000148 	.word	0x20000148
 8001d64:	20000144 	.word	0x20000144
 8001d68:	20000149 	.word	0x20000149
 8001d6c:	2000014a 	.word	0x2000014a
 8001d70:	20000002 	.word	0x20000002
 8001d74:	20000003 	.word	0x20000003

08001d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b094      	sub	sp, #80	; 0x50
 8001d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	2230      	movs	r2, #48	; 0x30
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 fce8 	bl	800475c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <SystemClock_Config+0xc8>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <SystemClock_Config+0xc8>)
 8001da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001daa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <SystemClock_Config+0xc8>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <SystemClock_Config+0xcc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <SystemClock_Config+0xcc>)
 8001dc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <SystemClock_Config+0xcc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ddc:	2310      	movs	r3, #16
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de0:	2302      	movs	r3, #2
 8001de2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001de4:	2300      	movs	r3, #0
 8001de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001de8:	2308      	movs	r3, #8
 8001dea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001dec:	2364      	movs	r3, #100	; 0x64
 8001dee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001df0:	2302      	movs	r3, #2
 8001df2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001df4:	2304      	movs	r3, #4
 8001df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df8:	f107 0320 	add.w	r3, r7, #32
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fecf 	bl	8002ba0 <HAL_RCC_OscConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e08:	f000 f81e 	bl	8001e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e10:	2302      	movs	r3, #2
 8001e12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	2103      	movs	r1, #3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f001 f931 	bl	8003090 <HAL_RCC_ClockConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e34:	f000 f808 	bl	8001e48 <Error_Handler>
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3750      	adds	r7, #80	; 0x50
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40007000 	.word	0x40007000

08001e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4c:	b672      	cpsid	i
}
 8001e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <Error_Handler+0x8>
	...

08001e54 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e5a:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <MX_SPI1_Init+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e88:	2210      	movs	r2, #16
 8001e8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001ea0:	220a      	movs	r2, #10
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <MX_SPI1_Init+0x64>)
 8001ea6:	f001 fa9f 	bl	80033e8 <HAL_SPI_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001eb0:	f7ff ffca 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000150 	.word	0x20000150
 8001ebc:	40013000 	.word	0x40013000

08001ec0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <MX_SPI2_Init+0x64>)
 8001ec6:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <MX_SPI2_Init+0x68>)
 8001ec8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <MX_SPI2_Init+0x64>)
 8001ecc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ed0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ed2:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <MX_SPI2_Init+0x64>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_SPI2_Init+0x64>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_SPI2_Init+0x64>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_SPI2_Init+0x64>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_SPI2_Init+0x64>)
 8001eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_SPI2_Init+0x64>)
 8001ef4:	2230      	movs	r2, #48	; 0x30
 8001ef6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <MX_SPI2_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_SPI2_Init+0x64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <MX_SPI2_Init+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_SPI2_Init+0x64>)
 8001f0c:	220a      	movs	r2, #10
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_SPI2_Init+0x64>)
 8001f12:	f001 fa69 	bl	80033e8 <HAL_SPI_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f1c:	f7ff ff94 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200001a8 	.word	0x200001a8
 8001f28:	40003800 	.word	0x40003800

08001f2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	; 0x30
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a41      	ldr	r2, [pc, #260]	; (8002050 <HAL_SPI_MspInit+0x124>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d12c      	bne.n	8001fa8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	4b40      	ldr	r3, [pc, #256]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a3f      	ldr	r2, [pc, #252]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001f58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a38      	ldr	r2, [pc, #224]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b36      	ldr	r3, [pc, #216]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f86:	23e0      	movs	r3, #224	; 0xe0
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f96:	2305      	movs	r3, #5
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	482d      	ldr	r0, [pc, #180]	; (8002058 <HAL_SPI_MspInit+0x12c>)
 8001fa2:	f000 fc5f 	bl	8002864 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001fa6:	e04f      	b.n	8002048 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a2b      	ldr	r2, [pc, #172]	; (800205c <HAL_SPI_MspInit+0x130>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d14a      	bne.n	8002048 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	4b27      	ldr	r3, [pc, #156]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a26      	ldr	r2, [pc, #152]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_SPI_MspInit+0x128>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002006:	2308      	movs	r3, #8
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002016:	2305      	movs	r3, #5
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	480f      	ldr	r0, [pc, #60]	; (8002060 <HAL_SPI_MspInit+0x134>)
 8002022:	f000 fc1f 	bl	8002864 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002038:	2305      	movs	r3, #5
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	4619      	mov	r1, r3
 8002042:	4808      	ldr	r0, [pc, #32]	; (8002064 <HAL_SPI_MspInit+0x138>)
 8002044:	f000 fc0e 	bl	8002864 <HAL_GPIO_Init>
}
 8002048:	bf00      	nop
 800204a:	3730      	adds	r7, #48	; 0x30
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40013000 	.word	0x40013000
 8002054:	40023800 	.word	0x40023800
 8002058:	40020000 	.word	0x40020000
 800205c:	40003800 	.word	0x40003800
 8002060:	40020800 	.word	0x40020800
 8002064:	40020400 	.word	0x40020400

08002068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_MspInit+0x4c>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <HAL_MspInit+0x4c>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_MspInit+0x4c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_MspInit+0x4c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_MspInit+0x4c>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_MspInit+0x4c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <NMI_Handler+0x4>

080020be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <HardFault_Handler+0x4>

080020c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <MemManage_Handler+0x4>

080020ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ce:	e7fe      	b.n	80020ce <BusFault_Handler+0x4>

080020d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <UsageFault_Handler+0x4>

080020d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002104:	f000 fa58 	bl	80025b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800210c:	b5b0      	push	{r4, r5, r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	gyroAngleX = GetAxisValue(0x2A, 0x2B);
 8002110:	212b      	movs	r1, #43	; 0x2b
 8002112:	202a      	movs	r0, #42	; 0x2a
 8002114:	f7ff f878 	bl	8001208 <GetAxisValue>
 8002118:	ee07 0a90 	vmov	s15, r0
 800211c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 8002122:	edc3 7a00 	vstr	s15, [r3]
	gyroAngleY = GetAxisValue(0x28, 0x29);
 8002126:	2129      	movs	r1, #41	; 0x29
 8002128:	2028      	movs	r0, #40	; 0x28
 800212a:	f7ff f86d 	bl	8001208 <GetAxisValue>
 800212e:	ee07 0a90 	vmov	s15, r0
 8002132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002136:	4b34      	ldr	r3, [pc, #208]	; (8002208 <TIM1_UP_TIM10_IRQHandler+0xfc>)
 8002138:	edc3 7a00 	vstr	s15, [r3]
	gyroAngleX -= GyroErrorX;
 800213c:	4b33      	ldr	r3, [pc, #204]	; (800220c <TIM1_UP_TIM10_IRQHandler+0x100>)
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	4b30      	ldr	r3, [pc, #192]	; (8002204 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 8002144:	ed93 7a00 	vldr	s14, [r3]
 8002148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 800214e:	edc3 7a00 	vstr	s15, [r3]
	gyroAngleY -= GyroErrorY;
 8002152:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <TIM1_UP_TIM10_IRQHandler+0x104>)
 8002154:	edd3 7a00 	vldr	s15, [r3]
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <TIM1_UP_TIM10_IRQHandler+0xfc>)
 800215a:	ed93 7a00 	vldr	s14, [r3]
 800215e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <TIM1_UP_TIM10_IRQHandler+0xfc>)
 8002164:	edc3 7a00 	vstr	s15, [r3]
	//gyroAngleZ = GetAxisValue(0x2C, 0x2D);
	AngleX += 2 * (gyroAngleX)/100.0;
 8002168:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <TIM1_UP_TIM10_IRQHandler+0x108>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe f997 	bl	80004a0 <__aeabi_f2d>
 8002172:	4604      	mov	r4, r0
 8002174:	460d      	mov	r5, r1
 8002176:	4b23      	ldr	r3, [pc, #140]	; (8002204 <TIM1_UP_TIM10_IRQHandler+0xf8>)
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002180:	ee17 0a90 	vmov	r0, s15
 8002184:	f7fe f98c 	bl	80004a0 <__aeabi_f2d>
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	4b22      	ldr	r3, [pc, #136]	; (8002218 <TIM1_UP_TIM10_IRQHandler+0x10c>)
 800218e:	f7fe fb09 	bl	80007a4 <__aeabi_ddiv>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4620      	mov	r0, r4
 8002198:	4629      	mov	r1, r5
 800219a:	f7fe f823 	bl	80001e4 <__adddf3>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7fe fbe5 	bl	8000974 <__aeabi_d2f>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4a19      	ldr	r2, [pc, #100]	; (8002214 <TIM1_UP_TIM10_IRQHandler+0x108>)
 80021ae:	6013      	str	r3, [r2, #0]
	AngleY += 2 * (gyroAngleY)/100.0;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <TIM1_UP_TIM10_IRQHandler+0x110>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f973 	bl	80004a0 <__aeabi_f2d>
 80021ba:	4604      	mov	r4, r0
 80021bc:	460d      	mov	r5, r1
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <TIM1_UP_TIM10_IRQHandler+0xfc>)
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021c8:	ee17 0a90 	vmov	r0, s15
 80021cc:	f7fe f968 	bl	80004a0 <__aeabi_f2d>
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <TIM1_UP_TIM10_IRQHandler+0x10c>)
 80021d6:	f7fe fae5 	bl	80007a4 <__aeabi_ddiv>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4620      	mov	r0, r4
 80021e0:	4629      	mov	r1, r5
 80021e2:	f7fd ffff 	bl	80001e4 <__adddf3>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	f7fe fbc1 	bl	8000974 <__aeabi_d2f>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a09      	ldr	r2, [pc, #36]	; (800221c <TIM1_UP_TIM10_IRQHandler+0x110>)
 80021f6:	6013      	str	r3, [r2, #0]
	position = position_past + velocity/10;
	velocity_past = velocity;
	position_past = position;
	*/
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021f8:	4809      	ldr	r0, [pc, #36]	; (8002220 <TIM1_UP_TIM10_IRQHandler+0x114>)
 80021fa:	f001 fc90 	bl	8003b1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bdb0      	pop	{r4, r5, r7, pc}
 8002202:	bf00      	nop
 8002204:	20000200 	.word	0x20000200
 8002208:	20000204 	.word	0x20000204
 800220c:	20000138 	.word	0x20000138
 8002210:	2000013c 	.word	0x2000013c
 8002214:	20000140 	.word	0x20000140
 8002218:	40590000 	.word	0x40590000
 800221c:	20000144 	.word	0x20000144
 8002220:	20000208 	.word	0x20000208

08002224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <SystemInit+0x20>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <SystemInit+0x20>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	463b      	mov	r3, r7
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002264:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <MX_TIM1_Init+0x9c>)
 8002266:	4a20      	ldr	r2, [pc, #128]	; (80022e8 <MX_TIM1_Init+0xa0>)
 8002268:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <MX_TIM1_Init+0x9c>)
 800226c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002270:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <MX_TIM1_Init+0x9c>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <MX_TIM1_Init+0x9c>)
 800227a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800227e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <MX_TIM1_Init+0x9c>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <MX_TIM1_Init+0x9c>)
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <MX_TIM1_Init+0x9c>)
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002292:	4814      	ldr	r0, [pc, #80]	; (80022e4 <MX_TIM1_Init+0x9c>)
 8002294:	f001 fb38 	bl	8003908 <HAL_TIM_Base_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800229e:	f7ff fdd3 	bl	8001e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022a8:	f107 0308 	add.w	r3, r7, #8
 80022ac:	4619      	mov	r1, r3
 80022ae:	480d      	ldr	r0, [pc, #52]	; (80022e4 <MX_TIM1_Init+0x9c>)
 80022b0:	f001 fe00 	bl	8003eb4 <HAL_TIM_ConfigClockSource>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80022ba:	f7ff fdc5 	bl	8001e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022c6:	463b      	mov	r3, r7
 80022c8:	4619      	mov	r1, r3
 80022ca:	4806      	ldr	r0, [pc, #24]	; (80022e4 <MX_TIM1_Init+0x9c>)
 80022cc:	f002 f992 	bl	80045f4 <HAL_TIMEx_MasterConfigSynchronization>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80022d6:	f7ff fdb7 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000208 	.word	0x20000208
 80022e8:	40010000 	.word	0x40010000

080022ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08e      	sub	sp, #56	; 0x38
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002300:	f107 0320 	add.w	r3, r7, #32
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
 8002318:	615a      	str	r2, [r3, #20]
 800231a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <MX_TIM2_Init+0xe8>)
 800231e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002322:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002324:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <MX_TIM2_Init+0xe8>)
 8002326:	2200      	movs	r2, #0
 8002328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232a:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <MX_TIM2_Init+0xe8>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <MX_TIM2_Init+0xe8>)
 8002332:	f04f 32ff 	mov.w	r2, #4294967295
 8002336:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002338:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <MX_TIM2_Init+0xe8>)
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233e:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <MX_TIM2_Init+0xe8>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002344:	4823      	ldr	r0, [pc, #140]	; (80023d4 <MX_TIM2_Init+0xe8>)
 8002346:	f001 fadf 	bl	8003908 <HAL_TIM_Base_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002350:	f7ff fd7a 	bl	8001e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800235a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800235e:	4619      	mov	r1, r3
 8002360:	481c      	ldr	r0, [pc, #112]	; (80023d4 <MX_TIM2_Init+0xe8>)
 8002362:	f001 fda7 	bl	8003eb4 <HAL_TIM_ConfigClockSource>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800236c:	f7ff fd6c 	bl	8001e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002370:	4818      	ldr	r0, [pc, #96]	; (80023d4 <MX_TIM2_Init+0xe8>)
 8002372:	f001 fb7b 	bl	8003a6c <HAL_TIM_PWM_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800237c:	f7ff fd64 	bl	8001e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002388:	f107 0320 	add.w	r3, r7, #32
 800238c:	4619      	mov	r1, r3
 800238e:	4811      	ldr	r0, [pc, #68]	; (80023d4 <MX_TIM2_Init+0xe8>)
 8002390:	f002 f930 	bl	80045f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800239a:	f7ff fd55 	bl	8001e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800239e:	2360      	movs	r3, #96	; 0x60
 80023a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	2200      	movs	r2, #0
 80023b2:	4619      	mov	r1, r3
 80023b4:	4807      	ldr	r0, [pc, #28]	; (80023d4 <MX_TIM2_Init+0xe8>)
 80023b6:	f001 fcbb 	bl	8003d30 <HAL_TIM_PWM_ConfigChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80023c0:	f7ff fd42 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80023c4:	4803      	ldr	r0, [pc, #12]	; (80023d4 <MX_TIM2_Init+0xe8>)
 80023c6:	f000 f843 	bl	8002450 <HAL_TIM_MspPostInit>

}
 80023ca:	bf00      	nop
 80023cc:	3738      	adds	r7, #56	; 0x38
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000250 	.word	0x20000250

080023d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a18      	ldr	r2, [pc, #96]	; (8002448 <HAL_TIM_Base_MspInit+0x70>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d116      	bne.n	8002418 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_TIM_Base_MspInit+0x74>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	4a16      	ldr	r2, [pc, #88]	; (800244c <HAL_TIM_Base_MspInit+0x74>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6453      	str	r3, [r2, #68]	; 0x44
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_TIM_Base_MspInit+0x74>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	2019      	movs	r0, #25
 800240c:	f000 f9f3 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002410:	2019      	movs	r0, #25
 8002412:	f000 fa0c 	bl	800282e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002416:	e012      	b.n	800243e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002420:	d10d      	bne.n	800243e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_TIM_Base_MspInit+0x74>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a08      	ldr	r2, [pc, #32]	; (800244c <HAL_TIM_Base_MspInit+0x74>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_TIM_Base_MspInit+0x74>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40010000 	.word	0x40010000
 800244c:	40023800 	.word	0x40023800

08002450 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002470:	d11d      	bne.n	80024ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <HAL_TIM_MspPostInit+0x68>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <HAL_TIM_MspPostInit+0x68>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_TIM_MspPostInit+0x68>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800248e:	2301      	movs	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800249e:	2301      	movs	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 030c 	add.w	r3, r7, #12
 80024a6:	4619      	mov	r1, r3
 80024a8:	4804      	ldr	r0, [pc, #16]	; (80024bc <HAL_TIM_MspPostInit+0x6c>)
 80024aa:	f000 f9db 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024ae:	bf00      	nop
 80024b0:	3720      	adds	r7, #32
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020000 	.word	0x40020000

080024c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c4:	480d      	ldr	r0, [pc, #52]	; (80024fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024c6:	490e      	ldr	r1, [pc, #56]	; (8002500 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024c8:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024cc:	e002      	b.n	80024d4 <LoopCopyDataInit>

080024ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d2:	3304      	adds	r3, #4

080024d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d8:	d3f9      	bcc.n	80024ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024da:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024dc:	4c0b      	ldr	r4, [pc, #44]	; (800250c <LoopFillZerobss+0x26>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e0:	e001      	b.n	80024e6 <LoopFillZerobss>

080024e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e4:	3204      	adds	r2, #4

080024e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e8:	d3fb      	bcc.n	80024e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024ea:	f7ff fe9b 	bl	8002224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ee:	f002 f903 	bl	80046f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f2:	f7ff fb5b 	bl	8001bac <main>
  bx  lr    
 80024f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002500:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002504:	080047a4 	.word	0x080047a4
  ldr r2, =_sbss
 8002508:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800250c:	2000029c 	.word	0x2000029c

08002510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002510:	e7fe      	b.n	8002510 <ADC_IRQHandler>
	...

08002514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002518:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <HAL_Init+0x40>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0d      	ldr	r2, [pc, #52]	; (8002554 <HAL_Init+0x40>)
 800251e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_Init+0x40>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <HAL_Init+0x40>)
 800252a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800252e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_Init+0x40>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a07      	ldr	r2, [pc, #28]	; (8002554 <HAL_Init+0x40>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253c:	2003      	movs	r0, #3
 800253e:	f000 f94f 	bl	80027e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002542:	200f      	movs	r0, #15
 8002544:	f000 f808 	bl	8002558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002548:	f7ff fd8e 	bl	8002068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023c00 	.word	0x40023c00

08002558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_InitTick+0x54>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_InitTick+0x58>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800256e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f967 	bl	800284a <HAL_SYSTICK_Config>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e00e      	b.n	80025a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b0f      	cmp	r3, #15
 800258a:	d80a      	bhi.n	80025a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800258c:	2200      	movs	r2, #0
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	f000 f92f 	bl	80027f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002598:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <HAL_InitTick+0x5c>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e000      	b.n	80025a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000008 	.word	0x20000008
 80025b0:	20000010 	.word	0x20000010
 80025b4:	2000000c 	.word	0x2000000c

080025b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_IncTick+0x20>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_IncTick+0x24>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	4a04      	ldr	r2, [pc, #16]	; (80025dc <HAL_IncTick+0x24>)
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000010 	.word	0x20000010
 80025dc:	20000298 	.word	0x20000298

080025e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return uwTick;
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <HAL_GetTick+0x14>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000298 	.word	0x20000298

080025f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7ff ffee 	bl	80025e0 <HAL_GetTick>
 8002604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d005      	beq.n	800261e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_Delay+0x44>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4413      	add	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800261e:	bf00      	nop
 8002620:	f7ff ffde 	bl	80025e0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	429a      	cmp	r2, r3
 800262e:	d8f7      	bhi.n	8002620 <HAL_Delay+0x28>
  {
  }
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000010 	.word	0x20000010

08002640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800266c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	db0b      	blt.n	80026ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <__NVIC_EnableIRQ+0x38>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2001      	movs	r0, #1
 80026c6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db0a      	blt.n	800270a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	490c      	ldr	r1, [pc, #48]	; (800272c <__NVIC_SetPriority+0x4c>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	440b      	add	r3, r1
 8002704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002708:	e00a      	b.n	8002720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <__NVIC_SetPriority+0x50>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3b04      	subs	r3, #4
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	440b      	add	r3, r1
 800271e:	761a      	strb	r2, [r3, #24]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000e100 	.word	0xe000e100
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f1c3 0307 	rsb	r3, r3, #7
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf28      	it	cs
 8002752:	2304      	movcs	r3, #4
 8002754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	2b06      	cmp	r3, #6
 800275c:	d902      	bls.n	8002764 <NVIC_EncodePriority+0x30>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3b03      	subs	r3, #3
 8002762:	e000      	b.n	8002766 <NVIC_EncodePriority+0x32>
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800277c:	f04f 31ff 	mov.w	r1, #4294967295
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43d9      	mvns	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	4313      	orrs	r3, r2
         );
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ac:	d301      	bcc.n	80027b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00f      	b.n	80027d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <SysTick_Config+0x40>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ba:	210f      	movs	r1, #15
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f7ff ff8e 	bl	80026e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <SysTick_Config+0x40>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <SysTick_Config+0x40>)
 80027cc:	2207      	movs	r2, #7
 80027ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff29 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002808:	f7ff ff3e 	bl	8002688 <__NVIC_GetPriorityGrouping>
 800280c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7ff ff8e 	bl	8002734 <NVIC_EncodePriority>
 8002818:	4602      	mov	r2, r0
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff5d 	bl	80026e0 <__NVIC_SetPriority>
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff31 	bl	80026a4 <__NVIC_EnableIRQ>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffa2 	bl	800279c <SysTick_Config>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e159      	b.n	8002b34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002880:	2201      	movs	r2, #1
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	f040 8148 	bne.w	8002b2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d005      	beq.n	80028b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d130      	bne.n	8002918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2203      	movs	r2, #3
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ec:	2201      	movs	r2, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 0201 	and.w	r2, r3, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b03      	cmp	r3, #3
 8002922:	d017      	beq.n	8002954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	2203      	movs	r2, #3
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d123      	bne.n	80029a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	08da      	lsrs	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3208      	adds	r2, #8
 8002968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	220f      	movs	r2, #15
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	08da      	lsrs	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	69b9      	ldr	r1, [r7, #24]
 80029a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0203 	and.w	r2, r3, #3
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80a2 	beq.w	8002b2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b57      	ldr	r3, [pc, #348]	; (8002b4c <HAL_GPIO_Init+0x2e8>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a56      	ldr	r2, [pc, #344]	; (8002b4c <HAL_GPIO_Init+0x2e8>)
 80029f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <HAL_GPIO_Init+0x2e8>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a06:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_GPIO_Init+0x2ec>)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a49      	ldr	r2, [pc, #292]	; (8002b54 <HAL_GPIO_Init+0x2f0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d019      	beq.n	8002a66 <HAL_GPIO_Init+0x202>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a48      	ldr	r2, [pc, #288]	; (8002b58 <HAL_GPIO_Init+0x2f4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_GPIO_Init+0x1fe>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a47      	ldr	r2, [pc, #284]	; (8002b5c <HAL_GPIO_Init+0x2f8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00d      	beq.n	8002a5e <HAL_GPIO_Init+0x1fa>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a46      	ldr	r2, [pc, #280]	; (8002b60 <HAL_GPIO_Init+0x2fc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <HAL_GPIO_Init+0x1f6>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a45      	ldr	r2, [pc, #276]	; (8002b64 <HAL_GPIO_Init+0x300>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d101      	bne.n	8002a56 <HAL_GPIO_Init+0x1f2>
 8002a52:	2304      	movs	r3, #4
 8002a54:	e008      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a56:	2307      	movs	r3, #7
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e004      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e002      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_GPIO_Init+0x204>
 8002a66:	2300      	movs	r3, #0
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	f002 0203 	and.w	r2, r2, #3
 8002a6e:	0092      	lsls	r2, r2, #2
 8002a70:	4093      	lsls	r3, r2
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a78:	4935      	ldr	r1, [pc, #212]	; (8002b50 <HAL_GPIO_Init+0x2ec>)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	089b      	lsrs	r3, r3, #2
 8002a7e:	3302      	adds	r3, #2
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a86:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aaa:	4a2f      	ldr	r2, [pc, #188]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad4:	4a24      	ldr	r2, [pc, #144]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002afe:	4a1a      	ldr	r2, [pc, #104]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b28:	4a0f      	ldr	r2, [pc, #60]	; (8002b68 <HAL_GPIO_Init+0x304>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3301      	adds	r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b0f      	cmp	r3, #15
 8002b38:	f67f aea2 	bls.w	8002880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40013800 	.word	0x40013800
 8002b54:	40020000 	.word	0x40020000
 8002b58:	40020400 	.word	0x40020400
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40020c00 	.word	0x40020c00
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40013c00 	.word	0x40013c00

08002b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b7c:	787b      	ldrb	r3, [r7, #1]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b88:	e003      	b.n	8002b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b8a:	887b      	ldrh	r3, [r7, #2]
 8002b8c:	041a      	lsls	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	619a      	str	r2, [r3, #24]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e267      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d075      	beq.n	8002caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bbe:	4b88      	ldr	r3, [pc, #544]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d00c      	beq.n	8002be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bca:	4b85      	ldr	r3, [pc, #532]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d112      	bne.n	8002bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd6:	4b82      	ldr	r3, [pc, #520]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be2:	d10b      	bne.n	8002bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	4b7e      	ldr	r3, [pc, #504]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d05b      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x108>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d157      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e242      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x74>
 8002c06:	4b76      	ldr	r3, [pc, #472]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a75      	ldr	r2, [pc, #468]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e01d      	b.n	8002c50 <HAL_RCC_OscConfig+0xb0>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x98>
 8002c1e:	4b70      	ldr	r3, [pc, #448]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6f      	ldr	r2, [pc, #444]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b6d      	ldr	r3, [pc, #436]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6c      	ldr	r2, [pc, #432]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0xb0>
 8002c38:	4b69      	ldr	r3, [pc, #420]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a68      	ldr	r2, [pc, #416]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b66      	ldr	r3, [pc, #408]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a65      	ldr	r2, [pc, #404]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7ff fcc2 	bl	80025e0 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c60:	f7ff fcbe 	bl	80025e0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e207      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b5b      	ldr	r3, [pc, #364]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0xc0>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7ff fcae 	bl	80025e0 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c88:	f7ff fcaa 	bl	80025e0 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1f3      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	4b51      	ldr	r3, [pc, #324]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0xe8>
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d063      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cb6:	4b4a      	ldr	r3, [pc, #296]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc2:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d11c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cce:	4b44      	ldr	r3, [pc, #272]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d116      	bne.n	8002d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	4b41      	ldr	r3, [pc, #260]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x152>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e1c7      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4937      	ldr	r1, [pc, #220]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	e03a      	b.n	8002d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <HAL_RCC_OscConfig+0x244>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7ff fc63 	bl	80025e0 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d1e:	f7ff fc5f 	bl	80025e0 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e1a8      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d30:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3c:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4925      	ldr	r1, [pc, #148]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
 8002d50:	e015      	b.n	8002d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d52:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <HAL_RCC_OscConfig+0x244>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7ff fc42 	bl	80025e0 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d60:	f7ff fc3e 	bl	80025e0 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e187      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d036      	beq.n	8002df8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_RCC_OscConfig+0x248>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7ff fc22 	bl	80025e0 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da0:	f7ff fc1e 	bl	80025e0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e167      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_OscConfig+0x240>)
 8002db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x200>
 8002dbe:	e01b      	b.n	8002df8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCC_OscConfig+0x248>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7ff fc0b 	bl	80025e0 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	e00e      	b.n	8002dec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dce:	f7ff fc07 	bl	80025e0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d907      	bls.n	8002dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e150      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
 8002de0:	40023800 	.word	0x40023800
 8002de4:	42470000 	.word	0x42470000
 8002de8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	4b88      	ldr	r3, [pc, #544]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ea      	bne.n	8002dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8097 	beq.w	8002f34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0a:	4b81      	ldr	r3, [pc, #516]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10f      	bne.n	8002e36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	4b7d      	ldr	r3, [pc, #500]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a7c      	ldr	r2, [pc, #496]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b7a      	ldr	r3, [pc, #488]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e32:	2301      	movs	r3, #1
 8002e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b77      	ldr	r3, [pc, #476]	; (8003014 <HAL_RCC_OscConfig+0x474>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d118      	bne.n	8002e74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e42:	4b74      	ldr	r3, [pc, #464]	; (8003014 <HAL_RCC_OscConfig+0x474>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a73      	ldr	r2, [pc, #460]	; (8003014 <HAL_RCC_OscConfig+0x474>)
 8002e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4e:	f7ff fbc7 	bl	80025e0 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e56:	f7ff fbc3 	bl	80025e0 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e10c      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	4b6a      	ldr	r3, [pc, #424]	; (8003014 <HAL_RCC_OscConfig+0x474>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCC_OscConfig+0x2ea>
 8002e7c:	4b64      	ldr	r3, [pc, #400]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a63      	ldr	r2, [pc, #396]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
 8002e88:	e01c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x324>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0x30c>
 8002e92:	4b5f      	ldr	r3, [pc, #380]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	4a5e      	ldr	r2, [pc, #376]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9e:	4b5c      	ldr	r3, [pc, #368]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	4a5b      	ldr	r2, [pc, #364]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCC_OscConfig+0x324>
 8002eac:	4b58      	ldr	r3, [pc, #352]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4a57      	ldr	r2, [pc, #348]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb8:	4b55      	ldr	r3, [pc, #340]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a54      	ldr	r2, [pc, #336]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	f023 0304 	bic.w	r3, r3, #4
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d015      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7ff fb88 	bl	80025e0 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed2:	e00a      	b.n	8002eea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed4:	f7ff fb84 	bl	80025e0 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e0cb      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eea:	4b49      	ldr	r3, [pc, #292]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0ee      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x334>
 8002ef6:	e014      	b.n	8002f22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef8:	f7ff fb72 	bl	80025e0 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efe:	e00a      	b.n	8002f16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f00:	f7ff fb6e 	bl	80025e0 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e0b5      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f16:	4b3e      	ldr	r3, [pc, #248]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1ee      	bne.n	8002f00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d105      	bne.n	8002f34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f28:	4b39      	ldr	r3, [pc, #228]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	4a38      	ldr	r2, [pc, #224]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80a1 	beq.w	8003080 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f3e:	4b34      	ldr	r3, [pc, #208]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d05c      	beq.n	8003004 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d141      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f52:	4b31      	ldr	r3, [pc, #196]	; (8003018 <HAL_RCC_OscConfig+0x478>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7ff fb42 	bl	80025e0 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f60:	f7ff fb3e 	bl	80025e0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e087      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f72:	4b27      	ldr	r3, [pc, #156]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	019b      	lsls	r3, r3, #6
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	085b      	lsrs	r3, r3, #1
 8002f96:	3b01      	subs	r3, #1
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	491b      	ldr	r1, [pc, #108]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <HAL_RCC_OscConfig+0x478>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7ff fb17 	bl	80025e0 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7ff fb13 	bl	80025e0 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e05c      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x416>
 8002fd4:	e054      	b.n	8003080 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <HAL_RCC_OscConfig+0x478>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7ff fb00 	bl	80025e0 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7ff fafc 	bl	80025e0 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e045      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x444>
 8003002:	e03d      	b.n	8003080 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d107      	bne.n	800301c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e038      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
 8003010:	40023800 	.word	0x40023800
 8003014:	40007000 	.word	0x40007000
 8003018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <HAL_RCC_OscConfig+0x4ec>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d028      	beq.n	800307c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d121      	bne.n	800307c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d11a      	bne.n	800307c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800304c:	4013      	ands	r3, r2
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003054:	4293      	cmp	r3, r2
 8003056:	d111      	bne.n	800307c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	3b01      	subs	r3, #1
 8003066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d107      	bne.n	800307c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800

08003090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0cc      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a4:	4b68      	ldr	r3, [pc, #416]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d90c      	bls.n	80030cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b63      	ldr	r3, [pc, #396]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0b8      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e4:	4b59      	ldr	r3, [pc, #356]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a58      	ldr	r2, [pc, #352]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030fc:	4b53      	ldr	r3, [pc, #332]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4a52      	ldr	r2, [pc, #328]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	494d      	ldr	r1, [pc, #308]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d044      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d119      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e07f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d003      	beq.n	800314e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314a:	2b03      	cmp	r3, #3
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314e:	4b3f      	ldr	r3, [pc, #252]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e06f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315e:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e067      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316e:	4b37      	ldr	r3, [pc, #220]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f023 0203 	bic.w	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4934      	ldr	r1, [pc, #208]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003180:	f7ff fa2e 	bl	80025e0 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	e00a      	b.n	800319e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003188:	f7ff fa2a 	bl	80025e0 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e04f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 020c 	and.w	r2, r3, #12
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d1eb      	bne.n	8003188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b0:	4b25      	ldr	r3, [pc, #148]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d20c      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e032      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4916      	ldr	r1, [pc, #88]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	490e      	ldr	r1, [pc, #56]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003216:	f000 f821 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800321a:	4602      	mov	r2, r0
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	490a      	ldr	r1, [pc, #40]	; (8003250 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	5ccb      	ldrb	r3, [r1, r3]
 800322a:	fa22 f303 	lsr.w	r3, r2, r3
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff f98e 	bl	8002558 <HAL_InitTick>

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023c00 	.word	0x40023c00
 800324c:	40023800 	.word	0x40023800
 8003250:	08004784 	.word	0x08004784
 8003254:	20000008 	.word	0x20000008
 8003258:	2000000c 	.word	0x2000000c

0800325c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800325c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003260:	b090      	sub	sp, #64	; 0x40
 8003262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	637b      	str	r3, [r7, #52]	; 0x34
 8003268:	2300      	movs	r3, #0
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800326c:	2300      	movs	r3, #0
 800326e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003274:	4b59      	ldr	r3, [pc, #356]	; (80033dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b08      	cmp	r3, #8
 800327e:	d00d      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x40>
 8003280:	2b08      	cmp	r3, #8
 8003282:	f200 80a1 	bhi.w	80033c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x34>
 800328a:	2b04      	cmp	r3, #4
 800328c:	d003      	beq.n	8003296 <HAL_RCC_GetSysClockFreq+0x3a>
 800328e:	e09b      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003292:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003294:	e09b      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003296:	4b53      	ldr	r3, [pc, #332]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003298:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800329a:	e098      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800329c:	4b4f      	ldr	r3, [pc, #316]	; (80033dc <HAL_RCC_GetSysClockFreq+0x180>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032a6:	4b4d      	ldr	r3, [pc, #308]	; (80033dc <HAL_RCC_GetSysClockFreq+0x180>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d028      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b2:	4b4a      	ldr	r3, [pc, #296]	; (80033dc <HAL_RCC_GetSysClockFreq+0x180>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	099b      	lsrs	r3, r3, #6
 80032b8:	2200      	movs	r2, #0
 80032ba:	623b      	str	r3, [r7, #32]
 80032bc:	627a      	str	r2, [r7, #36]	; 0x24
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032c4:	2100      	movs	r1, #0
 80032c6:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032c8:	fb03 f201 	mul.w	r2, r3, r1
 80032cc:	2300      	movs	r3, #0
 80032ce:	fb00 f303 	mul.w	r3, r0, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	4a43      	ldr	r2, [pc, #268]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032d6:	fba0 1202 	umull	r1, r2, r0, r2
 80032da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032dc:	460a      	mov	r2, r1
 80032de:	62ba      	str	r2, [r7, #40]	; 0x28
 80032e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e2:	4413      	add	r3, r2
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e8:	2200      	movs	r2, #0
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	61fa      	str	r2, [r7, #28]
 80032ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032f6:	f7fd fb8d 	bl	8000a14 <__aeabi_uldivmod>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4613      	mov	r3, r2
 8003300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003302:	e053      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003304:	4b35      	ldr	r3, [pc, #212]	; (80033dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	099b      	lsrs	r3, r3, #6
 800330a:	2200      	movs	r2, #0
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	617a      	str	r2, [r7, #20]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003316:	f04f 0b00 	mov.w	fp, #0
 800331a:	4652      	mov	r2, sl
 800331c:	465b      	mov	r3, fp
 800331e:	f04f 0000 	mov.w	r0, #0
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	0159      	lsls	r1, r3, #5
 8003328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800332c:	0150      	lsls	r0, r2, #5
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	ebb2 080a 	subs.w	r8, r2, sl
 8003336:	eb63 090b 	sbc.w	r9, r3, fp
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003346:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800334a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800334e:	ebb2 0408 	subs.w	r4, r2, r8
 8003352:	eb63 0509 	sbc.w	r5, r3, r9
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	00eb      	lsls	r3, r5, #3
 8003360:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003364:	00e2      	lsls	r2, r4, #3
 8003366:	4614      	mov	r4, r2
 8003368:	461d      	mov	r5, r3
 800336a:	eb14 030a 	adds.w	r3, r4, sl
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	eb45 030b 	adc.w	r3, r5, fp
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003382:	4629      	mov	r1, r5
 8003384:	028b      	lsls	r3, r1, #10
 8003386:	4621      	mov	r1, r4
 8003388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800338c:	4621      	mov	r1, r4
 800338e:	028a      	lsls	r2, r1, #10
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003396:	2200      	movs	r2, #0
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	60fa      	str	r2, [r7, #12]
 800339c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033a0:	f7fd fb38 	bl	8000a14 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4613      	mov	r3, r2
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_GetSysClockFreq+0x180>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	3301      	adds	r3, #1
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033c6:	e002      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80033ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3740      	adds	r7, #64	; 0x40
 80033d4:	46bd      	mov	sp, r7
 80033d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	017d7840 	.word	0x017d7840

080033e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e07b      	b.n	80034f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800340a:	d009      	beq.n	8003420 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	61da      	str	r2, [r3, #28]
 8003412:	e005      	b.n	8003420 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe fd76 	bl	8001f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003456:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a4:	ea42 0103 	orr.w	r1, r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	0c1b      	lsrs	r3, r3, #16
 80034be:	f003 0104 	and.w	r1, r3, #4
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	f003 0210 	and.w	r2, r3, #16
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b088      	sub	sp, #32
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_SPI_Transmit+0x22>
 8003518:	2302      	movs	r3, #2
 800351a:	e126      	b.n	800376a <HAL_SPI_Transmit+0x270>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003524:	f7ff f85c 	bl	80025e0 <HAL_GetTick>
 8003528:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d002      	beq.n	8003540 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800353a:	2302      	movs	r3, #2
 800353c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800353e:	e10b      	b.n	8003758 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_SPI_Transmit+0x52>
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003550:	e102      	b.n	8003758 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2203      	movs	r2, #3
 8003556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	88fa      	ldrh	r2, [r7, #6]
 800356a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	88fa      	ldrh	r2, [r7, #6]
 8003570:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003598:	d10f      	bne.n	80035ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d007      	beq.n	80035d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e0:	d14b      	bne.n	800367a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_SPI_Transmit+0xf6>
 80035ea:	8afb      	ldrh	r3, [r7, #22]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d13e      	bne.n	800366e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	881a      	ldrh	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	1c9a      	adds	r2, r3, #2
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003614:	e02b      	b.n	800366e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b02      	cmp	r3, #2
 8003622:	d112      	bne.n	800364a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	1c9a      	adds	r2, r3, #2
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	86da      	strh	r2, [r3, #54]	; 0x36
 8003648:	e011      	b.n	800366e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800364a:	f7fe ffc9 	bl	80025e0 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d803      	bhi.n	8003662 <HAL_SPI_Transmit+0x168>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d102      	bne.n	8003668 <HAL_SPI_Transmit+0x16e>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800366c:	e074      	b.n	8003758 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1ce      	bne.n	8003616 <HAL_SPI_Transmit+0x11c>
 8003678:	e04c      	b.n	8003714 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_Transmit+0x18e>
 8003682:	8afb      	ldrh	r3, [r7, #22]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d140      	bne.n	800370a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	7812      	ldrb	r2, [r2, #0]
 8003694:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036ae:	e02c      	b.n	800370a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d113      	bne.n	80036e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	330c      	adds	r3, #12
 80036c8:	7812      	ldrb	r2, [r2, #0]
 80036ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80036e4:	e011      	b.n	800370a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e6:	f7fe ff7b 	bl	80025e0 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d803      	bhi.n	80036fe <HAL_SPI_Transmit+0x204>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d102      	bne.n	8003704 <HAL_SPI_Transmit+0x20a>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003708:	e026      	b.n	8003758 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1cd      	bne.n	80036b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	6839      	ldr	r1, [r7, #0]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f8b3 	bl	8003884 <SPI_EndRxTxTransaction>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10a      	bne.n	8003748 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e000      	b.n	8003758 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003756:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003768:	7ffb      	ldrb	r3, [r7, #31]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003784:	f7fe ff2c 	bl	80025e0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	4413      	add	r3, r2
 8003792:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003794:	f7fe ff24 	bl	80025e0 <HAL_GetTick>
 8003798:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800379a:	4b39      	ldr	r3, [pc, #228]	; (8003880 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	015b      	lsls	r3, r3, #5
 80037a0:	0d1b      	lsrs	r3, r3, #20
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	fb02 f303 	mul.w	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037aa:	e054      	b.n	8003856 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d050      	beq.n	8003856 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037b4:	f7fe ff14 	bl	80025e0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d902      	bls.n	80037ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d13d      	bne.n	8003846 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037e2:	d111      	bne.n	8003808 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ec:	d004      	beq.n	80037f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f6:	d107      	bne.n	8003808 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003810:	d10f      	bne.n	8003832 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003830:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e017      	b.n	8003876 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	3b01      	subs	r3, #1
 8003854:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4013      	ands	r3, r2
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	429a      	cmp	r2, r3
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	429a      	cmp	r2, r3
 8003872:	d19b      	bne.n	80037ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000008 	.word	0x20000008

08003884 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af02      	add	r7, sp, #8
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <SPI_EndRxTxTransaction+0x7c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1b      	ldr	r2, [pc, #108]	; (8003904 <SPI_EndRxTxTransaction+0x80>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	0d5b      	lsrs	r3, r3, #21
 800389c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038a0:	fb02 f303 	mul.w	r3, r2, r3
 80038a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ae:	d112      	bne.n	80038d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2200      	movs	r2, #0
 80038b8:	2180      	movs	r1, #128	; 0x80
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f7ff ff5a 	bl	8003774 <SPI_WaitFlagStateUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	f043 0220 	orr.w	r2, r3, #32
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e00f      	b.n	80038f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3b01      	subs	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b80      	cmp	r3, #128	; 0x80
 80038ee:	d0f2      	beq.n	80038d6 <SPI_EndRxTxTransaction+0x52>
 80038f0:	e000      	b.n	80038f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80038f2:	bf00      	nop
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000008 	.word	0x20000008
 8003904:	165e9f81 	.word	0x165e9f81

08003908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e041      	b.n	800399e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fe fd52 	bl	80023d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f000 fbae 	bl	80040a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d001      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e044      	b.n	8003a4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <HAL_TIM_Base_Start_IT+0xb0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d018      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ea:	d013      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1a      	ldr	r2, [pc, #104]	; (8003a5c <HAL_TIM_Base_Start_IT+0xb4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00e      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <HAL_TIM_Base_Start_IT+0xb8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d009      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d111      	bne.n	8003a38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d010      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a36:	e007      	b.n	8003a48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	40014000 	.word	0x40014000

08003a6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e041      	b.n	8003b02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f839 	bl	8003b0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f000 fafc 	bl	80040a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d122      	bne.n	8003b7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d11b      	bne.n	8003b7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f06f 0202 	mvn.w	r2, #2
 8003b4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fa82 	bl	800406a <HAL_TIM_IC_CaptureCallback>
 8003b66:	e005      	b.n	8003b74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fa74 	bl	8004056 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa85 	bl	800407e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d122      	bne.n	8003bce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d11b      	bne.n	8003bce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f06f 0204 	mvn.w	r2, #4
 8003b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fa58 	bl	800406a <HAL_TIM_IC_CaptureCallback>
 8003bba:	e005      	b.n	8003bc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fa4a 	bl	8004056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa5b 	bl	800407e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d122      	bne.n	8003c22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d11b      	bne.n	8003c22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f06f 0208 	mvn.w	r2, #8
 8003bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa2e 	bl	800406a <HAL_TIM_IC_CaptureCallback>
 8003c0e:	e005      	b.n	8003c1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fa20 	bl	8004056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa31 	bl	800407e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d122      	bne.n	8003c76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b10      	cmp	r3, #16
 8003c3c:	d11b      	bne.n	8003c76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f06f 0210 	mvn.w	r2, #16
 8003c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2208      	movs	r2, #8
 8003c4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fa04 	bl	800406a <HAL_TIM_IC_CaptureCallback>
 8003c62:	e005      	b.n	8003c70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f9f6 	bl	8004056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fa07 	bl	800407e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d10e      	bne.n	8003ca2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f06f 0201 	mvn.w	r2, #1
 8003c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f9d0 	bl	8004042 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cac:	2b80      	cmp	r3, #128	; 0x80
 8003cae:	d10e      	bne.n	8003cce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cba:	2b80      	cmp	r3, #128	; 0x80
 8003cbc:	d107      	bne.n	8003cce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fd0b 	bl	80046e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	d10e      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d107      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f9cc 	bl	8004092 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d10e      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d107      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f06f 0220 	mvn.w	r2, #32
 8003d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fcd5 	bl	80046d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e0ae      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	f200 809f 	bhi.w	8003e9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d5e:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003d99 	.word	0x08003d99
 8003d68:	08003e9d 	.word	0x08003e9d
 8003d6c:	08003e9d 	.word	0x08003e9d
 8003d70:	08003e9d 	.word	0x08003e9d
 8003d74:	08003dd9 	.word	0x08003dd9
 8003d78:	08003e9d 	.word	0x08003e9d
 8003d7c:	08003e9d 	.word	0x08003e9d
 8003d80:	08003e9d 	.word	0x08003e9d
 8003d84:	08003e1b 	.word	0x08003e1b
 8003d88:	08003e9d 	.word	0x08003e9d
 8003d8c:	08003e9d 	.word	0x08003e9d
 8003d90:	08003e9d 	.word	0x08003e9d
 8003d94:	08003e5b 	.word	0x08003e5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fa02 	bl	80041a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0208 	orr.w	r2, r2, #8
 8003db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0204 	bic.w	r2, r2, #4
 8003dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6999      	ldr	r1, [r3, #24]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	619a      	str	r2, [r3, #24]
      break;
 8003dd6:	e064      	b.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fa48 	bl	8004274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6999      	ldr	r1, [r3, #24]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	021a      	lsls	r2, r3, #8
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	619a      	str	r2, [r3, #24]
      break;
 8003e18:	e043      	b.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fa93 	bl	800434c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0208 	orr.w	r2, r2, #8
 8003e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69da      	ldr	r2, [r3, #28]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0204 	bic.w	r2, r2, #4
 8003e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69d9      	ldr	r1, [r3, #28]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	61da      	str	r2, [r3, #28]
      break;
 8003e58:	e023      	b.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fadd 	bl	8004420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69da      	ldr	r2, [r3, #28]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69d9      	ldr	r1, [r3, #28]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	021a      	lsls	r2, r3, #8
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	61da      	str	r2, [r3, #28]
      break;
 8003e9a:	e002      	b.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIM_ConfigClockSource+0x1c>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e0b4      	b.n	800403a <HAL_TIM_ConfigClockSource+0x186>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f08:	d03e      	beq.n	8003f88 <HAL_TIM_ConfigClockSource+0xd4>
 8003f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0e:	f200 8087 	bhi.w	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f16:	f000 8086 	beq.w	8004026 <HAL_TIM_ConfigClockSource+0x172>
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1e:	d87f      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f20:	2b70      	cmp	r3, #112	; 0x70
 8003f22:	d01a      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0xa6>
 8003f24:	2b70      	cmp	r3, #112	; 0x70
 8003f26:	d87b      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f28:	2b60      	cmp	r3, #96	; 0x60
 8003f2a:	d050      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x11a>
 8003f2c:	2b60      	cmp	r3, #96	; 0x60
 8003f2e:	d877      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b50      	cmp	r3, #80	; 0x50
 8003f32:	d03c      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0xfa>
 8003f34:	2b50      	cmp	r3, #80	; 0x50
 8003f36:	d873      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f38:	2b40      	cmp	r3, #64	; 0x40
 8003f3a:	d058      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x13a>
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d86f      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b30      	cmp	r3, #48	; 0x30
 8003f42:	d064      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x15a>
 8003f44:	2b30      	cmp	r3, #48	; 0x30
 8003f46:	d86b      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d060      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x15a>
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d867      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d05c      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x15a>
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d05a      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x15a>
 8003f58:	e062      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6899      	ldr	r1, [r3, #8]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f000 fb23 	bl	80045b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	609a      	str	r2, [r3, #8]
      break;
 8003f86:	e04f      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	6899      	ldr	r1, [r3, #8]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f000 fb0c 	bl	80045b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003faa:	609a      	str	r2, [r3, #8]
      break;
 8003fac:	e03c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f000 fa80 	bl	80044c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2150      	movs	r1, #80	; 0x50
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fad9 	bl	800457e <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e02c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f000 fa9f 	bl	800451e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2160      	movs	r1, #96	; 0x60
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fac9 	bl	800457e <TIM_ITRx_SetConfig>
      break;
 8003fec:	e01c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f000 fa60 	bl	80044c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2140      	movs	r1, #64	; 0x40
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fab9 	bl	800457e <TIM_ITRx_SetConfig>
      break;
 800400c:	e00c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f000 fab0 	bl	800457e <TIM_ITRx_SetConfig>
      break;
 800401e:	e003      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      break;
 8004024:	e000      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004038:	7bfb      	ldrb	r3, [r7, #15]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a34      	ldr	r2, [pc, #208]	; (800418c <TIM_Base_SetConfig+0xe4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00f      	beq.n	80040e0 <TIM_Base_SetConfig+0x38>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c6:	d00b      	beq.n	80040e0 <TIM_Base_SetConfig+0x38>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a31      	ldr	r2, [pc, #196]	; (8004190 <TIM_Base_SetConfig+0xe8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <TIM_Base_SetConfig+0x38>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a30      	ldr	r2, [pc, #192]	; (8004194 <TIM_Base_SetConfig+0xec>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_Base_SetConfig+0x38>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a2f      	ldr	r2, [pc, #188]	; (8004198 <TIM_Base_SetConfig+0xf0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d108      	bne.n	80040f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a25      	ldr	r2, [pc, #148]	; (800418c <TIM_Base_SetConfig+0xe4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d01b      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004100:	d017      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a22      	ldr	r2, [pc, #136]	; (8004190 <TIM_Base_SetConfig+0xe8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a21      	ldr	r2, [pc, #132]	; (8004194 <TIM_Base_SetConfig+0xec>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00f      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a20      	ldr	r2, [pc, #128]	; (8004198 <TIM_Base_SetConfig+0xf0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00b      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a1f      	ldr	r2, [pc, #124]	; (800419c <TIM_Base_SetConfig+0xf4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d007      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <TIM_Base_SetConfig+0xf8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <TIM_Base_SetConfig+0x8a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <TIM_Base_SetConfig+0xfc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d108      	bne.n	8004144 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a08      	ldr	r2, [pc, #32]	; (800418c <TIM_Base_SetConfig+0xe4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d103      	bne.n	8004178 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	615a      	str	r2, [r3, #20]
}
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40010000 	.word	0x40010000
 8004190:	40000400 	.word	0x40000400
 8004194:	40000800 	.word	0x40000800
 8004198:	40000c00 	.word	0x40000c00
 800419c:	40014000 	.word	0x40014000
 80041a0:	40014400 	.word	0x40014400
 80041a4:	40014800 	.word	0x40014800

080041a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f023 0201 	bic.w	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f023 0302 	bic.w	r3, r3, #2
 80041f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <TIM_OC1_SetConfig+0xc8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d10c      	bne.n	800421e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0308 	bic.w	r3, r3, #8
 800420a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f023 0304 	bic.w	r3, r3, #4
 800421c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a13      	ldr	r2, [pc, #76]	; (8004270 <TIM_OC1_SetConfig+0xc8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d111      	bne.n	800424a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800422c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	621a      	str	r2, [r3, #32]
}
 8004264:	bf00      	nop
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40010000 	.word	0x40010000

08004274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	f023 0210 	bic.w	r2, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0320 	bic.w	r3, r3, #32
 80042be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a1e      	ldr	r2, [pc, #120]	; (8004348 <TIM_OC2_SetConfig+0xd4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d10d      	bne.n	80042f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a15      	ldr	r2, [pc, #84]	; (8004348 <TIM_OC2_SetConfig+0xd4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d113      	bne.n	8004320 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004306:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40010000 	.word	0x40010000

0800434c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0303 	bic.w	r3, r3, #3
 8004382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1d      	ldr	r2, [pc, #116]	; (800441c <TIM_OC3_SetConfig+0xd0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d10d      	bne.n	80043c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a14      	ldr	r2, [pc, #80]	; (800441c <TIM_OC3_SetConfig+0xd0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d113      	bne.n	80043f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	621a      	str	r2, [r3, #32]
}
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	40010000 	.word	0x40010000

08004420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800446a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	031b      	lsls	r3, r3, #12
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a10      	ldr	r2, [pc, #64]	; (80044bc <TIM_OC4_SetConfig+0x9c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d109      	bne.n	8004494 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	019b      	lsls	r3, r3, #6
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40010000 	.word	0x40010000

080044c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f023 0201 	bic.w	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 030a 	bic.w	r3, r3, #10
 80044fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800451e:	b480      	push	{r7}
 8004520:	b087      	sub	sp, #28
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f023 0210 	bic.w	r2, r3, #16
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	031b      	lsls	r3, r3, #12
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800455a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	f043 0307 	orr.w	r3, r3, #7
 80045a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	609a      	str	r2, [r3, #8]
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	021a      	lsls	r2, r3, #8
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4313      	orrs	r3, r2
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	609a      	str	r2, [r3, #8]
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004608:	2302      	movs	r3, #2
 800460a:	e050      	b.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d018      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004658:	d013      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00e      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a16      	ldr	r2, [pc, #88]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d009      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d004      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a13      	ldr	r2, [pc, #76]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10c      	bne.n	800469c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4313      	orrs	r3, r2
 8004692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40010000 	.word	0x40010000
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800
 80046c8:	40000c00 	.word	0x40000c00
 80046cc:	40014000 	.word	0x40014000

080046d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <__libc_init_array>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4d0d      	ldr	r5, [pc, #52]	; (8004730 <__libc_init_array+0x38>)
 80046fc:	4c0d      	ldr	r4, [pc, #52]	; (8004734 <__libc_init_array+0x3c>)
 80046fe:	1b64      	subs	r4, r4, r5
 8004700:	10a4      	asrs	r4, r4, #2
 8004702:	2600      	movs	r6, #0
 8004704:	42a6      	cmp	r6, r4
 8004706:	d109      	bne.n	800471c <__libc_init_array+0x24>
 8004708:	4d0b      	ldr	r5, [pc, #44]	; (8004738 <__libc_init_array+0x40>)
 800470a:	4c0c      	ldr	r4, [pc, #48]	; (800473c <__libc_init_array+0x44>)
 800470c:	f000 f82e 	bl	800476c <_init>
 8004710:	1b64      	subs	r4, r4, r5
 8004712:	10a4      	asrs	r4, r4, #2
 8004714:	2600      	movs	r6, #0
 8004716:	42a6      	cmp	r6, r4
 8004718:	d105      	bne.n	8004726 <__libc_init_array+0x2e>
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004720:	4798      	blx	r3
 8004722:	3601      	adds	r6, #1
 8004724:	e7ee      	b.n	8004704 <__libc_init_array+0xc>
 8004726:	f855 3b04 	ldr.w	r3, [r5], #4
 800472a:	4798      	blx	r3
 800472c:	3601      	adds	r6, #1
 800472e:	e7f2      	b.n	8004716 <__libc_init_array+0x1e>
 8004730:	0800479c 	.word	0x0800479c
 8004734:	0800479c 	.word	0x0800479c
 8004738:	0800479c 	.word	0x0800479c
 800473c:	080047a0 	.word	0x080047a0

08004740 <memcpy>:
 8004740:	440a      	add	r2, r1
 8004742:	4291      	cmp	r1, r2
 8004744:	f100 33ff 	add.w	r3, r0, #4294967295
 8004748:	d100      	bne.n	800474c <memcpy+0xc>
 800474a:	4770      	bx	lr
 800474c:	b510      	push	{r4, lr}
 800474e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004756:	4291      	cmp	r1, r2
 8004758:	d1f9      	bne.n	800474e <memcpy+0xe>
 800475a:	bd10      	pop	{r4, pc}

0800475c <memset>:
 800475c:	4402      	add	r2, r0
 800475e:	4603      	mov	r3, r0
 8004760:	4293      	cmp	r3, r2
 8004762:	d100      	bne.n	8004766 <memset+0xa>
 8004764:	4770      	bx	lr
 8004766:	f803 1b01 	strb.w	r1, [r3], #1
 800476a:	e7f9      	b.n	8004760 <memset+0x4>

0800476c <_init>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr

08004778 <_fini>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr
